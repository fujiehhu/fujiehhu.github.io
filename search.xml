<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python笔记</title>
      <link href="/2019/09/23/python/"/>
      <url>/2019/09/23/python/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>单双引号都可</li></ul><blockquote><p>使用方法修改字符串的大小写</p></blockquote><ul><li><strong>title()</strong> 以首字母大写的方式显示每个单词</li><li>将字符串改为全部大写或全部小写：<strong>upper()</strong>，<strong>lower()</strong></li></ul><blockquote><p>合并（拼接）字符串</p></blockquote><ul><li>使用加号（+）来合并字符串</li></ul><blockquote><p>使用制表符或换行符来添加空白</p></blockquote><ul><li>制表符 \t <br> 换行符 \n <br> </li></ul><blockquote><p>删除空白</p></blockquote><ul><li>删除字符串开头的空白 <strong>lstrip()</strong> <br><br>删除字符串末尾的空白 <strong>rstrip()</strong>  <br><br>同时删除字符串两端的空白 <strong>strip()</strong></li></ul><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><ul><li>使用两个乘号表示乘方运算 3**2 = 9</li><li>将非字符串值表示为字符串 <strong>str()</strong></li></ul><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><blockquote><p>访问列表元素</p></blockquote><ul><li>列表是有序集合<pre class=" language-python"><code class="language-python">  bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>bicycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li>索引从0 而不是1 开始</li><li>将索引指定为-1，可让返回最后一个列表元素</li></ul><h2 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h2><pre class=" language-python"><code class="language-python">motorcycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'yamaha'</span><span class="token punctuation">,</span> <span class="token string">'suzuki'</span><span class="token punctuation">]</span></code></pre><blockquote><p>修改</p></blockquote><blockquote><p>添加</p></blockquote><ol><li><p>末尾添加：<strong>append()</strong></p></li><li><p>在列表中插入元素：<strong>insert()</strong> </p><pre class=" language-python"><code class="language-python"> motorcycles<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'ducati'</span><span class="token punctuation">)</span></code></pre></li><li><p>从列表中删除元素</p><ul><li><p>使用<strong>del</strong>语句删除元素</p><pre class=" language-python"><code class="language-python"><span class="token keyword">del</span> motorcycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">del</span> motorcycles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  </code></pre></li><li><p>使用方法 <strong>pop()</strong> 删除元素(可删除列表末尾的元素)</p><pre class=" language-python"><code class="language-python">popped_motorcycle <span class="token operator">=</span> motorcycles<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>popped_motorcycle<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'yamaha'</span><span class="token punctuation">,</span> <span class="token string">'suzuki'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'yamaha'</span><span class="token punctuation">]</span>suzuki</code></pre></li><li><p>弹出列表中任何位置处的元素</p><pre class=" language-python"><code class="language-python">pop<span class="token punctuation">(</span>索引<span class="token punctuation">)</span></code></pre></li><li><p>根据值删除元素 <strong>remove()</strong></p><pre class=" language-python"><code class="language-python">motorcycles<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'ducati'</span><span class="token punctuation">)</span></code></pre><blockquote><p>方法remove()只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</p></blockquote></li></ul></li></ol><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><blockquote><p>使用方法<strong>sort()</strong>对列表进行永久性排序</p></blockquote><ul><li>与字母顺序相反的顺序排列列表元素<strong>sort(reverse=True)</strong></li></ul><blockquote><p>使用函数<strong>sorted()</strong>对列表进行临时排序</p></blockquote><ul><li>与字母顺序相反的顺序排列列表元素<strong>sorted(reverse=True)</strong></li></ul><blockquote><p>反转<strong>列表元素</strong>的排列顺序 <strong>reverse()</strong></p></blockquote><blockquote><p>确定列表的长度 <strong>len()</strong></p></blockquote><hr><h1 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h1><h2 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h2><blockquote><p><strong>range()</strong> </p></blockquote><ul><li>函数range()让Python从你指定的第一个值开始数，并在到达你指定的第二个值后止，因此输出不包含第二个值</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他</title>
      <link href="/2019/09/16/qi-ta/"/>
      <url>/2019/09/16/qi-ta/</url>
      
        <content type="html"><![CDATA[<center><div id="weather-view-he"></div><script>WIDGET = {ID: 'ggduimj82w'};</script><script type="text/javascript" src="https://apip.weatherdt.com/view/static/js/r.js?v=1111"></script></center>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图片标注工具LabelImg</title>
      <link href="/2019/09/16/tu-pian-biao-zhu-gong-ju-labelimg/"/>
      <url>/2019/09/16/tu-pian-biao-zhu-gong-ju-labelimg/</url>
      
        <content type="html"><![CDATA[<h1 id="图片标注工具LabelImg的安装及使用方法"><a href="#图片标注工具LabelImg的安装及使用方法" class="headerlink" title="图片标注工具LabelImg的安装及使用方法"></a>图片标注工具LabelImg的安装及使用方法</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>百度云<a href="https://pan.baidu.com/s/15vy4367JYusVNNX-13RJzA" target="_blank" rel="noopener">地址</a> 提取码: ivdc </p><h2 id="anaconda-prompt命令行安装"><a href="#anaconda-prompt命令行安装" class="headerlink" title="anaconda prompt命令行安装"></a>anaconda prompt命令行安装</h2><pre><code>pip3 install labelImg</code></pre><p>打开,命令行输入</p><pre><code>labelimg</code></pre><hr><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li>修改默认的XML文件保存位置，使用快捷键“Ctrl+R”，改为自定义位置，这里的路径一定不能包含中文，否则无法保存</li><li>快捷键：<br>画框 w ;<br>保存 ctrl+s；<br>下一张图片 d；<br>上一张图片 a；<br>复制当前标签和矩形框 ctrl+d ；<br>标记当前图片已标记 Space</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> labelImg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌colab</title>
      <link href="/2019/09/04/gu-ge-colab/"/>
      <url>/2019/09/04/gu-ge-colab/</url>
      
        <content type="html"><![CDATA[<h1 id="Google-Colab简介"><a href="#Google-Colab简介" class="headerlink" title="Google Colab简介"></a>Google Colab简介</h1><p>Google Colaboratory是谷歌开放的一款研究工具，主要用于机器学习的开发和研究。这款工具现在可以免费使用，但是不是永久免费暂时还不确定。Google Colab最大的好处是给广大的AI开发者提供了免费的GPU使用！GPU型号是Tesla K80！你可以在上面轻松地跑例如：Keras、Tensorflow、Pytorch等框架。</p><h2 id="挂载云盘"><a href="#挂载云盘" class="headerlink" title="挂载云盘"></a>挂载云盘</h2><blockquote><p>from google.colab import drive<br><br>drive.mount(‘/content/drive/‘)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 谷歌colab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java笔记</title>
      <link href="/2019/08/30/java-bi-ji/"/>
      <url>/2019/08/30/java-bi-ji/</url>
      
        <content type="html"><![CDATA[<div id="weather-view-he"></div><script>WIDGET = {ID: 'ggduimj82w'};</script><script type="text/javascript" src="https://apip.weatherdt.com/view/static/js/r.js?v=1111"></script># Java基础知识(笔记)**java 基本数据类型**<table><thead><tr><th align="center">类型</th><th align="center">位数</th><th align="center">类型</th><th align="center">位数</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">8</td><td align="center">int</td><td align="center">32</td></tr><tr><td align="center">char</td><td align="center">16</td><td align="center">long</td><td align="center">64</td></tr><tr><td align="center">byte</td><td align="center">8</td><td align="center">float</td><td align="center">32</td></tr><tr><td align="center">short</td><td align="center">16</td><td align="center">double</td><td align="center">64</td></tr></tbody></table><p><strong>类修饰词</strong></p><p>public：定义的类可以被java的所有软件包使用</p><p>abstract：抽象类</p><p>final：定义的列不能用作父类</p><p>在同一个java源文件中可以包含多个类，但不能包含两个或者两个以上的具有public修饰词的类。</p><p>面向对象的技术的3大特性：<strong>继承性</strong>，<strong>封装性</strong>，<strong>多态性</strong>。</p><p><strong>静态多态性</strong>指的是在同一个类中通脉那个方法在功能上的重载。</p><p><strong>动态多态性</strong>指的是在子类和父类的类体重均定义了具有基本相同声明的费静态成员方法。</p><hr><p>数组元素的下标值从0开始。</p><h1 id="数组，字符串，向量与哈希表"><a href="#数组，字符串，向量与哈希表" class="headerlink" title="数组，字符串，向量与哈希表"></a>数组，字符串，向量与哈希表</h1><blockquote><p>Vector&lt;向量元素的数据类型&gt; 变量名</p></blockquote><p><strong>引用数据类型</strong>：类(calss)，接口(interface)，枚举(enum)，数组(array)。</p><p><strong>基本数据类型</strong>：布尔，字符，字节，短整数，整数，长整数，单精度浮点数，双精度浮点数。</p><p><strong>向量</strong>：Vector&lt;数据类型&gt; 变量名；数据类型必须是引用数据类型。</p><hr><ul><li><strong>静态代码块</strong>：随着类的加载而执行，而且只执行一次。静态代码块的执行顺序优先于main函数。</li></ul><p>转<a href="https://blog.csdn.net/sinat_33921105/article/details/79509638" target="_blank" rel="noopener">静态代码块—学会这个就够了</a></p><ul><li><p>运行java应用程序时，实际的代码运行之前的一个步骤是加载类，如果类中有静态成员，加载类时会在heap中为其分配空间，此空间是属于类的。类中的非静态成员（实例成员）是和类的对象绑定的，它们属于对象在heap中的空间。静态成员不能访问非静态成员，因为静态成员在类加载完成后已经存在于heap中了，但是如果没创建对象的话非静态成员是不存在的，所以在代码中有引用时会发生编译错误。反过来说，非静态成员可以访问静态成员，因为当非静态成员存在于heap中时，静态成员肯定已经存在于heap中了。</p></li><li><p><strong>static 声明的变量和方法在类中共享的</strong>，当使用static修饰变量时，<strong>在类中是共享</strong>。例如：在下列代码中定义静态变量i = 10时，当类创建了多个对象时，其中一个对象修改了i的值（ts1.i = 100）,其他对象ts2、ts3调用i值时，会出现i值都是100，说明静态变量i是共享。 <strong>非静态变量</strong>：当类中创建多个对象时，非静态变量在内存中直接分布各个新创建的对象中。所以当修改某个对象引用的变量值时，其他对象在引用变量时，没有发生改变。例如：j =20 ；ts1.j = 15;此时ts1对象输出 j=15 .而输出的ts2.j=20,ts3.j=20跟初始定义的j一样;</p></li><li><p>静态成员方法采用通过类名的方法调用“Thread.sleep()”和采用实例对象的调用sleep成员方法在效果上是一样的。<br>假设A和B分别是两个不同的线程，而线程B执行到下面的语句</p><blockquote><p>A.sleep(1000);</p></blockquote><p>则进入睡眠状态的是线程B，而不是线程A。</p></li><li><p>段落一</p><p>小段一</p></li><li><p>段落二</p><p>小段二</p></li></ul><hr><h1 id="多线程程序设计"><a href="#多线程程序设计" class="headerlink" title="多线程程序设计"></a>多线程程序设计</h1><p><strong>线程的生命周期</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="img/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="线程的生命周期" title="线程的生命周期"></p><h2 id="多线程同步"><a href="#多线程同步" class="headerlink" title="多线程同步"></a>多线程同步</h2><p>java虚拟机通过给每个<strong>对象</strong>加锁的方式实现多线程的同步处理。这里的<strong>对象</strong>包括<strong>类对象</strong>和<strong>实例对象</strong>两种。<br>一个类的<strong>静态成员域</strong>和<strong>静态成员方法</strong>隶属于类对象。一个类的<strong>非静态成员域</strong>和<strong>非静态成员方法</strong>是不隶属于类对象的，而隶属于类的<strong>实例对象</strong>。同样，一个类的静态成员域和静态成员方法不隶属于类的实例对象。创建类的实例对象可以通过<code>new</code>运算符和类的构造方法。</p><hr><h2 id="Java中的一个类怎么调用另一个类中的方法？"><a href="#Java中的一个类怎么调用另一个类中的方法？" class="headerlink" title="Java中的一个类怎么调用另一个类中的方法？"></a>Java中的一个类怎么调用另一个类中的方法？</h2><ul><li>方法1：新建一个类。然后在调用类中先进行被调用类实例化，然后通过实例化的对象访问。例如：</li></ul><pre><code>//先定义一个类import static java.lang.Systenm.out;public class Son{    public void IsSon(){        out.append(&quot;调用Son类中的IsSon成员方法成功&quot;)；    }}</code></pre><pre><code>//实例化，调用public calss Main(){    public static void main(String args[]){        Son son = new Son();        son.IsSon();    }}</code></pre><ul><li>方法2:新建一个类，将该类中需要被调用的方法设置为静态（static），加了static后，就可以用类名直接调用。然后在调用类中直接通过类名进行访问。调用格式为：类名.方法名（参数表）。</li></ul><pre><code>//先定义一个类import static java.lang.Systenm.out;public class Son{    public static void IsSon(){        out.append(&quot;调用Son类中的IsSon成员方法成功&quot;)；    }}</code></pre><pre><code>//实例化，调用public calss Main(){    public static void main(String args[]){        son.IsSon();    }}</code></pre><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>对象的构造主要通过类。类是实例对象的模板。</p><blockquote><p>[修饰词] class 类名 [extends 父类] [implemes 接口] {<br><br>类体<br><br>}</p></blockquote><p>&nbsp;&nbsp;<br>类体部分可以对定义类的<strong>构造方法</strong>和<strong>类的两类成员要素</strong>(成员域和成员方法)。</p><p>&nbsp;&nbsp;<br><strong>类的构造方法</strong>主要用创建类的实例对象，通常同时完成新创建的实例对象的初始化。</p><p>&nbsp;&nbsp;<br>构造方法有如下3个特点</p><blockquote><ol><li>构造方法名必须与类名相同<br> </li><li>构造方法不具有任何返回类型<br></li><li>任何一个类都含有构造方法</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esp8266安装</title>
      <link href="/2019/08/29/esp8266-an-zhuang/"/>
      <url>/2019/08/29/esp8266-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><blockquote><p>Hello World!</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络资源</title>
      <link href="/2019/08/29/zi-yuan/"/>
      <url>/2019/08/29/zi-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h1><blockquote><p>此页面主要分享一些搜集到的网络资源，不定时更新，侵权联系。</p></blockquote><hr><p><a href="https://pan.baidu.com/s/1OkV-Z1C1wYqKqmdFlpI9vA" target="_blank" rel="noopener">Java程序员面试宝典第4版</a> 提取码：hsl3 </p><p><a href="https://pan.baidu.com/s/1K1MvYuBprwSE72nixANkMw" target="_blank" rel="noopener">Java程序员面试笔试宝典</a> 提取码: 32k9 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客</title>
      <link href="/2019/08/29/wo-de-bo-ke/"/>
      <url>/2019/08/29/wo-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h1><hr><p>这是我的第一个个人博客网站，不定时更新，具体搭建过程可以<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">参考这里</a>。</p><p>感谢博主网站源代码开源，引用链接：<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">https://sunhwee.com/posts/6e8839eb.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
