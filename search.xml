<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java笔记</title>
      <link href="/2019/08/30/java-bi-ji/"/>
      <url>/2019/08/30/java-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础知识-笔记"><a href="#Java基础知识-笔记" class="headerlink" title="Java基础知识(笔记)"></a>Java基础知识(笔记)</h1><p><strong>java 基本数据类型</strong></p><table><thead><tr><th align="center">类型</th><th align="center">位数</th><th align="center">类型</th><th align="center">位数</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">8</td><td align="center">int</td><td align="center">32</td></tr><tr><td align="center">char</td><td align="center">16</td><td align="center">long</td><td align="center">64</td></tr><tr><td align="center">byte</td><td align="center">8</td><td align="center">float</td><td align="center">32</td></tr><tr><td align="center">short</td><td align="center">16</td><td align="center">double</td><td align="center">64</td></tr></tbody></table><p><strong>类修饰词</strong></p><p>public：定义的类可以被java的所有软件包使用</p><p>abstract：抽象类</p><p>final：定义的列不能用作父类</p><p>在同一个java源文件中可以包含多个类，但不能包含两个或者两个以上的具有public修饰词的类。</p><p>面向对象的技术的3大特性：<strong>继承性</strong>，<strong>封装性</strong>，<strong>多态性</strong>。</p><p><strong>静态多态性</strong>指的是在同一个类中通脉那个方法在功能上的重载。</p><p><strong>动态多态性</strong>指的是在子类和父类的类体重均定义了具有基本相同声明的费静态成员方法。</p><hr><p>数组元素的下标值从0开始。</p><h1 id="数组，字符串，向量与哈希表"><a href="#数组，字符串，向量与哈希表" class="headerlink" title="数组，字符串，向量与哈希表"></a>数组，字符串，向量与哈希表</h1><p><strong>引用数据类型</strong>：类(calss)，接口(interface)，枚举(enum)，数组(array)。</p><p><strong>基本数据类型</strong>：布尔，字符，字节，短整数，整数，长整数，单精度浮点数，双精度浮点数。</p><p><strong>向量</strong>：Vector&lt;数据类型&gt; 变量名；数据类型必须是引用数据类型。</p><hr><ul><li><strong>静态代码块</strong>：随着类的加载而执行，而且只执行一次。静态代码块的执行顺序优先于main函数。</li></ul><p>转<a href="https://blog.csdn.net/sinat_33921105/article/details/79509638" target="_blank" rel="noopener">静态代码块—学会这个就够了</a></p><ul><li><p>运行java应用程序时，实际的代码运行之前的一个步骤是加载类，如果类中有静态成员，加载类时会在heap中为其分配空间，此空间是属于类的。类中的非静态成员（实例成员）是和类的对象绑定的，它们属于对象在heap中的空间。静态成员不能访问非静态成员，因为静态成员在类加载完成后已经存在于heap中了，但是如果没创建对象的话非静态成员是不存在的，所以在代码中有引用时会发生编译错误。反过来说，非静态成员可以访问静态成员，因为当非静态成员存在于heap中时，静态成员肯定已经存在于heap中了。</p></li><li><p><strong>static 声明的变量和方法在类中共享的</strong>，当使用static修饰变量时，<strong>在类中是共享</strong>。例如：在下列代码中定义静态变量i = 10时，当类创建了多个对象时，其中一个对象修改了i的值（ts1.i = 100）,其他对象ts2、ts3调用i值时，会出现i值都是100，说明静态变量i是共享。 <strong>非静态变量</strong>：当类中创建多个对象时，非静态变量在内存中直接分布各个新创建的对象中。所以当修改某个对象引用的变量值时，其他对象在引用变量时，没有发生改变。例如：j =20 ；ts1.j = 15;此时ts1对象输出 j=15 .而输出的ts2.j=20,ts3.j=20跟初始定义的j一样;</p></li><li><p>静态成员方法采用通过类名的方法调用“Thread.sleep()”和采用实例对象的调用sleep成员方法在效果上是一样的。<br>假设A和B分别是两个不同的线程，而线程B执行到下面的语句</p><blockquote><p>A.sleep(1000);</p></blockquote><p>则进入睡眠状态的是线程B，而不是线程A。</p></li><li><p>段落一</p><p>小段一</p></li><li><p>段落二</p><p>小段二</p></li></ul><hr><h1 id="多线程程序设计"><a href="#多线程程序设计" class="headerlink" title="多线程程序设计"></a>多线程程序设计</h1><p><strong>线程的生命周期</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="img/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="线程的生命周期" title="线程的生命周期"></p><h2 id="多线程同步"><a href="#多线程同步" class="headerlink" title="多线程同步"></a>多线程同步</h2><p>java虚拟机通过给每个<strong>对象</strong>加锁的方式实现多线程的同步处理。这里的<strong>对象</strong>包括<strong>类对象</strong>和<strong>实例对象</strong>两种。<br>一个类的<strong>静态成员域</strong>和<strong>静态成员方法</strong>隶属于类对象。一个类的<strong>非静态成员域</strong>和<strong>非静态成员方法</strong>是不隶属于类对象的，而隶属于类的<strong>实例对象</strong>。同样，一个类的静态成员域和静态成员方法不隶属于类的实例对象。创建类的实例对象可以通过<code>new</code>运算符和类的构造方法。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esp8266安装</title>
      <link href="/2019/08/29/esp8266-an-zhuang/"/>
      <url>/2019/08/29/esp8266-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><blockquote><p>Hello World!</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源链接</title>
      <link href="/2019/08/29/zi-yuan/"/>
      <url>/2019/08/29/zi-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h1><blockquote><p>此页面主要分享一些搜集到的网络资源，不定时更新，侵权联系。</p></blockquote><hr><p><a href="https://pan.baidu.com/s/1OkV-Z1C1wYqKqmdFlpI9vA" target="_blank" rel="noopener">Java程序员面试宝典第4版</a> 提取码：hsl3 </p><p><a href="https://pan.baidu.com/s/1K1MvYuBprwSE72nixANkMw" target="_blank" rel="noopener">Java程序员面试笔试宝典</a> 提取码: 32k9 </p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客</title>
      <link href="/2019/08/29/wo-de-bo-ke/"/>
      <url>/2019/08/29/wo-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h1><hr><p>这是我的第一个个人博客网站，不定时更新，具体搭建过程可以<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">参考这里</a>。</p><p>感谢博主网站源代码开源，引用链接：<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">https://sunhwee.com/posts/6e8839eb.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
