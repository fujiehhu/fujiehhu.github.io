<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java</title>
      <link href="/2019/10/29/java/"/>
      <url>/2019/10/29/java/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><p><a href="##面向对象">面向对象</a></p></li><li><p><a href="##类的封装、继承与多态">类的封装、继承与多态</a></p></li><li><p><a href="##抽象类与接口">抽象类与接口</a></p></li><li><p><a href="##Java常用类库">Java常用类库</a></p></li><li><p><a href="##异常处理">异常处理</a></p></li><li><p><a href="##Java类集框架">Java类集框架</a></p></li><li><p><a href="##枚举">枚举</a></p></li><li><p><a href="#以下为一些方法">一些常用函数</a></p><ul><li><a href="##Java中的length与length()">Java中的length与length()</a></li><li><a href="##与数组操作有关的API方法">与数组操作有关的API方法</a></li><li><a href="##int与String的相互转换">int与String 的相互转换</a></li><li><a href="##java字符串的子串的获取和删除">java字符串的子串的获取和删除</a></li><li><a href="##java-字符串的遍历和字符串数组的遍历">java字符串的遍历和字符串数组的遍历</a></li><li><a href="##判断字符串是否属于字母">判断字符串是否属于字母 </a></li></ul></li></ul><p><font size="4"> </font><br>Java特性：</p><p>简单 安全 可移植 面向对象 健壮 多线程 体系结构中立 解释执行 高性能 分布式 动态</p><hr><p>面向对象的三个原则：<br><font color="red">封装 继承 多态</font></p><hr><p>Java 与 Java EE 的关系</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/10/29/KRtz28.png" alt="Java 与 Java EE 的关系"></p><hr><p><strong>continue</strong> 与 <strong>break</strong></p><p>在while、for、do…while或switch等语句结构中</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">for</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>      语句 <span class="token number">1</span> <span class="token punctuation">;</span>      语句 <span class="token number">2</span> <span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token keyword">break</span> <span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      语句 n <span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ul><li><p>break 语句</p><ul><li>使程序立即<font color="red">退出</font>该结构,转而执行该结构下面的语句</li></ul></li><li><p>continue 语句</p><ul><li>结束<font color="red">本次</font>循环而立即测试循环的条件</li></ul></li></ul><hr><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li><p>对象</p><ul><li>对象的特征分为<font color="red">静态特征</font>和<font color="red">动态特征</font><ul><li><font color="red">静态特征</font>抽象为<font color="red">属性</font>， 用数据来描述，在java中称为<font color="red">变量</font></li><li><font color="red">动态特征</font>抽象为<font color="red">行为</font>， 用代码来表示，在java中称为<font color="red">方法</font></li></ul></li><li>一个对象由一组属性和一组对属性进行操作的方法构成</li><li>对象的比较<ul><li><strong>==</strong> 用于比较两个对象的<font color="red">内存地址值</font>是否相等</li><li><strong>equals()</strong> 用于比较两个对象的<font color="red">内容</font>是否一致</li></ul></li></ul></li><li><p>类</p><ul><li>用类的方式解决问题，必须用类创建一个<font color="red">实例化的类对象</font>，然后通过<font color="red">类对象</font>去访问类的成员变量，去调用类的成员方法来实现程序的功能</li><li><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//类的定义使用</span> <span class="token keyword">class</span> <span class="token class-name">colordefine</span><span class="token punctuation">{</span>    String color <span class="token operator">=</span> <span class="token string">"黑色"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">getMes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"定义类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       colordefine b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">colordefine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>       b<span class="token punctuation">.</span><span class="token function">getMes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li>java类属性和对象属性的初始化顺序如下<ul><li>类属性（静态变量）定义时初始化</li><li>static 块中的初始化代码</li><li>对象属性（非静态变量）定义时的初始化</li><li>构造方法（函数）中初始化代码</li></ul></li></ul></li><li><p>类方法</p><ul><li><p>类方法也称<font color="red">静态方法</font></p></li><li><p><font color="red">构造方法</font>所完成的主要工作是帮助新创建的对象赋初值</p><ul><li><font color="green">构造方法没有返回值</font></li><li><font color="green">与类名称相同</font></li><li>构造方法无需在程序中直接使用，而是在对象产生时自动执行</li></ul></li><li><p>构造方法和普通方法都可以<font color="red">重载</font></p></li><li><p>只要明确的声明了构造方法，那么默认的构造方法就不会自动生成</p><ul><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>       name <span class="token operator">=</span> n<span class="token punctuation">;</span>       age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//------------------</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>       Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正确</span>       Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错 没有默认的构造方法</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ---------------------</span> <span class="token comment" spellcheck="true">//       修改后</span> <span class="token comment" spellcheck="true">//----------------------</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    Private <span class="token keyword">int</span> age<span class="token punctuation">;</span>    puclic <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>       name <span class="token operator">=</span> n<span class="token punctuation">;</span>       age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//-----------</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>       Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正确</span>       Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正确</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ul></li><li><p>单态模式</p></li><li><p>类中的属性或者方法被<strong>private</strong>修饰时，该类实例化的对象便不能调用</p><ul><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">aa</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       Person p <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Error:(9, 27) java: name 在 Person 中是 private 访问控制</span></code></pre></li></ul></li></ul></li></ul><h2 id="类的封装、继承与多态"><a href="#类的封装、继承与多态" class="headerlink" title="类的封装、继承与多态"></a>类的封装、继承与多态</h2><ul><li><p>类的封装</p></li><li><p>类的继承</p><ul><li>java中支持类的<font color="red">单继承</font>和<font color="red">多层</font>继承，但是不支持多继承</li><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/10/31/KoyNyF.png" alt="多重继承"></li><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/10/31/Koyfwd.png" alt="多层继承"></li><li><font color="red">子类对象在实例化时会默认<font color="green">先去调用父类中</font>的无参构造方法，之后<font color="green">再调用本类中</font>的相应构造方法</font></li><li><font color="green">super</font>关键字完成子类调用父类中的属性和方法，只能放在程序第一行<ul><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//父类构造方法</span>    <span class="token keyword">public</span> <span class="token function">Persong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    String school<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//子类的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span>String school<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//这里用super调用父类中的方法</span>       <span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>       <span class="token keyword">super</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//调用父类中的方法</span>       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//调用本类中shool属性</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>类的多态</p><ul><li>子类实例化对象可以转换为父类实例化对象  <font color="#8470FF">向上转型（自动完成）</font><ul><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    puvlic <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//错误</span>       Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>       Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向下转型</span>       <span class="token comment" spellcheck="true">//正确</span>       Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span>       Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向下转型</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ul></li><li><font color="#8470FF">向下转型必须进行强制类型转换</font></li></ul></li></ul><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><ul><li>抽象类<ul><li>抽象类、抽象方法用<font color="green">abstract</font>来修饰</li><li>抽象类不能直接被实例化(不能直接用new关键字去产生对象)</li><li>抽象方法只需声明，而不需实现</li><li>含有抽象方法的类必须声明为抽象类，抽象类的子类<font color="red">必须覆写所有抽象方法</font>后才能被实例化，否则这个子类还是抽象类</li><li>抽象类也可以有构造方法，但是这些构造方法<font color="red">必须在子类中被调用</font></li><li><font color="#8470FF">抽象类中方法有一般方法和抽象方法</font></li></ul></li><li>接口<ul><li>接口里的数据成员必须被初始化，且数据成员均为常量</li><li>接口里的方法必须<font color="red">全部声明为abstract（抽象方法）</font></li><li><font color="#8470FF">接口是可以被实例化的，但是不能被直接实例化，只能通过其子类进行实例化</font></li></ul></li></ul><h2 id="关于类的专题"><a href="#关于类的专题" class="headerlink" title="关于类的专题"></a>关于类的专题</h2><ul><li><p>内部类</p><ul><li>外部类声明的属性可以被内部类所访问</li><li>内部类声明的属性外部类无法访问</li><li>用static声明的内部类则变成外部类，<font color="red">用static声明的内部类不能访问非static的外部类属性</font></li><li>内部类不仅可以在类中定义，也可以在方法中定义<ul><li>在方法中定义的内部类<font color="red">只能访问方法中的<font color="green">final</font>类型的局部变量</font>（final定义的局部变量相当于一个常量，它的生命周期超出方法运行的生命周期）</li></ul></li></ul></li><li><p>将数组传递到方法里</p><ul><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">add10</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>Static 关键字</p><ul><li>静态变量： 类变量  <ul><li>static声明的属性是<font color="red">所有对象共享的</font>，用static声明的属性也可以用类名直接访问  </li></ul></li><li>静态方法： 类方法 <ul><li>在使用static类型声明的方法时， 如果在类中声明了一个<font color="green">static类型的属性</font>，则此属性既可以<font color="green">在非static类型的方法</font>中使用，也可以<font color="green">在static类型的方法</font>中使用。</li><li>如果要用static类型的方法调用非static类型的属性，就会<font color="red">出错</font></li></ul></li></ul></li><li><p>静态代码块</p><ul><li>当类被载入时，静态代码块被执行，且<font color="red">只执行一次</font></li><li>静态代码块优于静态方法，静态代码块可以对静态属性初始化</li><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//此段代码块会首先被执行</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 输出</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span></code></pre></li></ul></li><li><p>final 关键字</p><ul><li>final 标记的类不能被继承</li><li>final 标记的方法不能被子类覆写</li><li>final 标记的变量（成员变量和局部变量）即为常量，只能赋值一次</li></ul></li><li><p>instanceof 关键字</p><ul><li>判断一个类是否实现了某个接口</li><li>判断一个实例对象是否属于一个类</li></ul></li></ul><h2 id="Java常用类库"><a href="#Java常用类库" class="headerlink" title="Java常用类库"></a>Java常用类库</h2><ul><li><p>String类和StringBuffer类</p><ul><li>String类对象的内容一旦被初始化就不能再改变</li><li>StringBuffer类用于内容可以改变的字符串。一旦通过StringBuffer生成了最终想要的字符串，就应该使用StringBuffer.toString()方法将其转换成String类。</li></ul></li><li><p>类成员的访问控制权限</p><ul><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/11/04/KxEwFg.png" alt="访问控制符的权限"></li></ul></li></ul><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/11/12/M1EFDe.png" alt><br></p><ul><li><p><font color="blue">运行时异常</font>:都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，<font color="red">这些异常是不检查异常</font>，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p><p> <strong>运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。</strong></p></li><li><p><font color="blue">非运行时异常 （编译异常）</font>： 是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义<font color="red">检查异常</font>。</p></li></ul><hr><h2 id="Java类集框架"><a href="#Java类集框架" class="headerlink" title="Java类集框架"></a>Java类集框架</h2><p>类集框架又叫做集合框架或<font color="#5CACEE">集合类</font>, 类集框架 本质 上是对基本的 数据 结构（线性表、树等）和算法（查找、排序等）的封装。</p><p>由于基本数据类型不能保存一系列的数据，对其进行扩展便形成了数组；又由于数组长度不可更改，缺乏灵活性，对数组进一步扩展便形成了功能更强大的“类集框架”。数组和类集框架都是一种“容器”，不同的是：</p><ol><li>数组的长度时固定的，集合类的长度时可变的；</li><li>数组用来存放基本数据类型，集合类用来存储对象的引用，<font color="#5CACEE">不能存储基本数据类型</font>，存储的基本数据类型会进行自动类型转换。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/11/07/Mkysuq.png" alt="集合框架体系图"></p><p><a href="https://www.cnblogs.com/jing99/p/7057245.html" target="_blank" rel="noopener">java集合继承关系图</a></p><ul><li><p><font color="#00CD66" size="4">TreeMap</font></p><ul><li><font color="#5CACEE">底层是二叉树数据结构。线程不同步。可以用于给map集合中的键进行排序。</font></li><li>TreeMap 是由红黑树实现的有序的 key-value 集合</li></ul></li><li><p><font color="#00CD66" size="4">HashMap</font></p><ul><li><a href="https://www.cnblogs.com/ysocean/p/8711071.html#_label2" target="_blank" rel="noopener">JDK1.8源码(七)——java.util.HashMap 类</a></li><li><font color="#5CACEE">底层是哈希表数据结构，允许使用 null 值和 null 键，该集合是不同步的。</font></li><li>定义：HashMap 是一个散列表，它存储的内容是键值对(key-value)映射，而且 key 和 value 都可以为 null</li><li>HashMap 是由数组+链表+红黑树组成（jdk1.8）</li><li><strong>主要方法</strong><ul><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/11/07/MAymo8.png" alt></li><li>遍历元素<ul><li><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//1、分别获取key和value的集合</span> <span class="token keyword">for</span><span class="token punctuation">(</span>String key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">for</span><span class="token punctuation">(</span>Object value <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//2、获取key集合，然后遍历key，根据key得到 value</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> keySet<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//3、得到 Entry 集合，然后遍历 Entry</span> Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//4、迭代</span> Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> mapEntry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>mapEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li>put 方法的三种情况<ul><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/11/07/MAcfsA.png" alt="put方法的三种情况"></li></ul></li><li>总结<ul><li>基于JDK1.8的HashMap是由数组+链表+红黑树组成，当链表长度超过 8 时会自动转换成红黑树，当红黑树节点个数小于 6 时，又会转化成链表。相对于早期版本的 JDK HashMap 实现，新增了红黑树作为底层数据结构，在数据量较大且哈希碰撞较多时，能够极大的增加检索的效率。</li><li>允许 key 和 value 都为 null。key 重复会被覆盖，value 允许重复。</li><li>非线程安全</li><li>无序（遍历HashMap得到元素的顺序不是按照插入的顺序）</li></ul></li><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/11/07/MAf44x.png" alt></li></ul></li><li><p><font color="#00CD66" size="4">LinkedHashMap</font></p><ul><li>LinkedHashMap 是有序的，因为 LinkedHashMap 在 HashMap 的基础上单独维护了一个具有所有数据的双向链表，该链表保证了元素迭代的顺序</li><li>LinkedHashMap = HashMap + LinkedList</li></ul></li></ul><ul><li><p><font color="#00CD66" size="4">HashSet</font></p><ul><li>HashSet是Set接口的实现类，储存的是<font color="red">无序</font>、<font color="red">唯一的</font>对象。</li><li><font color="#5CACEE">不能存储相同的数据，存储数据时是无序的，HashSet存储元素的顺序并不是按照存入时的顺序</font></li><li><strong>主要方法</strong><ul><li>add():只有set中尚未包含指定元素，则添加指定元素返回true，否则添加失败返回false。</li><li>remove():如果指定元素存在于此 set 中，则将其移除。底层使用HashMap的remove方法删除指定的Entry。</li><li>contains():判断某个元素是否存在于set中。</li><li>clone():调用返回这个集合的浅表副本。</li></ul></li><li>遍历的方法<ul><li>for (String string: hashSet) System.out.print(string);</li></ul></li></ul></li><li><p><font color="#00CD66" size="4">LinkedHashSet</font></p><ul><li>HashSet下面有一个子类LinkedHashSet，它是链表和哈希表组合的一个数据存储结构。</li><li><font color="#5CACEE">不能存储相同的数据，存储数据时是有序的，LinkedHashSet存储元素的顺序是按照存入时的顺序</font></li></ul></li><li><p><font color="#00CD66" size="4">TreeSet</font></p><ul><li>TreeSet是用来排序的, 可以指定一个顺序, 对象存入之后会按照指定的顺序排列</li></ul></li><li><p><font color="#00CD66" size="4">Vector、ArrayList和LinkedList</font></p><p> <a href="https://www.cnblogs.com/zengjiao/p/6244019.html" target="_blank" rel="noopener">List集合及子类</a></p><ul><li><p>List子类特点</p><ul><li>ArrayList：&ensp; 底层结构是数组，查询快，增删慢，线程不安全，效率高</li><li>Vector：&emsp;&ensp; 底层结构是数组，查询快，增删慢，线程安全，  效率底</li><li>LinkedList：底层结构是链表，查询慢，增删快，线程不安全，效率高</li></ul></li><li><p>Vector 与 ArrayList唯一的区别</p><ul><li>Vector是线程安全的，即它的大部分方法都包含有关键字synchronized，因此，若对于单一线程的应用来说，最好使用ArrayList代替Vector，因为这样效率会快很多；为了保证数据的同步和一致性，可以使用Vector代替ArrayList实现同样的功能。</li></ul></li><li><p>大致区别</p><ul><li>ArrayList是实现了基于动态数组的数据结构，LinkedList是基于链表结构。</li><li>对于随机访问的get和set方法，ArrayList要优于LinkedList，因为LinkedList要移动指针。</li><li>对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据</li></ul></li><li><p>应用场景</p><ul><li>ArrayList使用在查询比较多，但是插入和删除比较少的情况，而LinkedList用在查询比较少而插入删除比较多的情况</li></ul><table><thead><tr> <th>操作</th> <th>Array</th> <th>ArrayList</th> </tr> </thead><tbody><tr><td>创建 array/ArrayList</td><td>String[] a = new String[10]</td><td>ArrayList<> list = new ArrayList&lt;&gt;();</td></tr><tr><td>访问一个元素</td><td>a[index]</td><td>list.get(index);</td></tr><tr><td>更新一个元素</td><td>a[index] = “London”;</td><td>list.set(index, “London”);</td></tr><tr><td>返回大小</td><td>a.length</td><td>list.size();</td></tr><tr><td>排序</td><td>java.util.Arrays.sort(array)</td><td>java.util.Collections.sort(arraylist)</td></tr><tr><td>添加一个新元素</td><td>相当复杂</td><td>list.add(“London”);</td></tr><tr><td>插入一个新元素</td><td>相当复杂</td><td>list.add(index, “London”);</td></tr><tr><td>删除一个元素</td><td>相当复杂</td><td>list.remove(index);</td></tr><tr><td>删除一个元素</td><td>相当复杂</td><td>list.remove(Object);</td></tr><tr><td>删除所有元素</td><td>？</td><td>list.clear();</td></tr></tbody></table>   &ensp;<table><thead><tr><th>LinkedList</th> <th>添加元素</th><th>删除元素</th> <th>查看元素</th> </tr></thead><tbody><tr><td>作为链表</td> <td>add()</td><td>remove()</td><td>get()</td> </tr><tr><td>作为队列</td> <td>offer()</td><td>poll()</td><td>peek()</td> </tr><tr><td>作为栈</td> <td>push()</td><td>pop()</td><td>无</td> </tr></tbody></table>&ensp;<table><thead><tr><th colspan="2">常用方法</th> </tr></thead><tbody><tr><td>add()</td> <td>将指定的元素追加到此列表的末尾</td> </tr><tr><td>add(index, element)</td> <td>在此列表中的指定位置插入指定的元素</td> </tr><tr><td>addFirst()</td> <td>在该列表开头插入指定的元素</td> </tr><tr><td>addLast()</td> <td>将指定的元素追加到此列表的末尾</td> </tr><tr><td>clear()</td> <td>从列表中删除所有元素</td> </tr><tr><td>contains()</td> <td>如果此列表包含指定的元素，则返回 true </td> </tr><tr><td>get()</td> <td>返回此列表中指定位置的元素</td> </tr><tr><td>getFirst()</td> <td>返回此列表中的第一个元素</td> </tr><tr><td>getLast()</td> <td>返回此列表中的最后一个元素</td> </tr><tr><td>indexOf()</td> <td>返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1</td> </tr><tr><td>lastIndexOf()</td> <td>返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1</td> </tr><tr><td>set(int index, E element)</td> <td>用指定的元素替换此列表中指定位置的元素</td> </tr><tr><td>remove(int index)</td> <td>删除指定位置的节点</td> </tr><tr><td>size()</td><td>返回此列表中的元素数</td> </tr></tbody></table></li></ul></li></ul><ul><li><font color="#00CD66" size="4">比较</font></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/11/07/MAgkQJ.png" alt="比较"></p><hr><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li><p>public enum 名字{<br> 枚举量（常量，符合标识符书写）<font color="red">必须作为第一条语句</font></p><p>}</p></li><li><p>枚举类型是<font color="red">类</font>,有构造方法（不能是第一条语句，只能是<font color="red">private</font>），方法，字段</p></li><li><p>获取枚举类型中的常量—枚举名.常量</p></li><li><p>枚举类型的每一个值都是一个对象</p></li><li><p>eg：</p><ul><li><p>eunm Color{</p><p> RED，BLUE，YELLOW；</p><p> (等价于 public static final Color RED = new Color(); … )</p><p> }</p></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Color<span class="token punctuation">{</span>   RED<span class="token punctuation">,</span>GREEN<span class="token punctuation">,</span>BLUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      Color c <span class="token operator">=</span> Color<span class="token punctuation">.</span>RED<span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// RED</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">switch</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">case</span> RED<span class="token operator">:</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h1 id="以下为一些方法"><a href="#以下为一些方法" class="headerlink" title="以下为一些方法"></a>以下为一些方法</h1><h2 id="Java中的length与length"><a href="#Java中的length与length" class="headerlink" title="Java中的length与length()"></a>Java中的length与length()</h2><ul><li><p>length 是【属性】</p><ul><li>求数组的长度</li><li><pre class=" language-java"><code class="language-java"> String <span class="token punctuation">[</span><span class="token punctuation">]</span> myList<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"str1"</span><span class="token punctuation">,</span><span class="token string">"str2"</span><span class="token punctuation">,</span><span class="token string">"str3"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>length() 是【方法】</p><ul><li>求字符串的长度</li><li><pre class=" language-java"><code class="language-java"> String <span class="token punctuation">[</span><span class="token punctuation">]</span> myString<span class="token operator">=</span><span class="token string">"stringtest"</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><hr><h2 id="java-字符串的遍历和字符串数组的遍历"><a href="#java-字符串的遍历和字符串数组的遍历" class="headerlink" title="java-字符串的遍历和字符串数组的遍历"></a>java-字符串的遍历和字符串数组的遍历</h2><pre class=" language-java"><code class="language-java">String s<span class="token operator">=</span><span class="token string">"abcde"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>　　<span class="token punctuation">{</span>　　　　<span class="token keyword">char</span> c<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出a b c d e，获取字符串</span>　　<span class="token punctuation">}</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> s1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>　　<span class="token punctuation">{</span>　　　　System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出a b c d e，获取字符串数组</span>　　<span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/11/06/MiN0yQ.png" alt="字符串操作的各种方法"></p><hr><h2 id="判断字符串是否属于字母"><a href="#判断字符串是否属于字母" class="headerlink" title="判断字符串是否属于字母"></a>判断字符串是否属于字母</h2><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"Hello, my name is John"</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token operator">||</span> <span class="token string">'A'</span><span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span>  <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><hr><h2 id="与数组操作有关的API方法"><a href="#与数组操作有关的API方法" class="headerlink" title="与数组操作有关的API方法"></a>与数组操作有关的API方法</h2><ul><li><p>数组的拷贝 <font color="red">System.arraycopy(source,0,dest,0,x)</font></p><ul><li>复制源数组从下标0开始的x个元素到目标数组，从目标数组的下标0所对应的位置开始存取</li><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span> a1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>a2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//----------------------</span> a2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>数组的排序 <font color="red">Arrays.sort()</font></p><ul><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--------------------------</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><hr><h2 id="int与String的相互转换"><a href="#int与String的相互转换" class="headerlink" title="int与String的相互转换"></a>int与String的相互转换</h2><blockquote><p><font color="#0099ff">int</font> 转 <font color="#0099ff">String</font></p></blockquote><ul><li>num + “”</li><li>String.valueOf(num)</li><li>Integer.toString(num)</li><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> String str <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span> String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> String str <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre></li></ul><blockquote><p><font color="#0099ff">String</font> 转 <font color="#0099ff">int</font></p></blockquote><ul><li>Integer.parseInt(str)</li><li>Integer.valueOf(str).intValue()</li><li><pre class=" language-java"><code class="language-java"> String str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><hr><hr><h2 id="java字符串的子串的获取和删除"><a href="#java字符串的子串的获取和删除" class="headerlink" title="java字符串的子串的获取和删除"></a>java字符串的子串的获取和删除</h2><ul><li><p>获取字符串子串</p><ul><li>sb.substring(5); //返回从指定下标开始截取的子字符串</li><li>sb.substring(2，4); //返回从指定下标开始截取的子字符串</li></ul></li><li><p>删除字符或字符串</p><ul><li>sb.deleteCharAt(8); //删除下标位置为8的字符</li><li>sb.delete(1, 3); //删除下标位置在1到3的字符，包括1但不包括3</li></ul></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些题目</title>
      <link href="/2019/10/25/yi-xie-ti-mu/"/>
      <url>/2019/10/25/yi-xie-ti-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#面试问答题链接">面试问答题链接</a></li><li><a href="#小知识点与错题">错题</a></li></ul><table><tr><td bgcolor="00FF7F">假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？注意：给定 n 是一个正整数。</td></tr></table><p><strong><center><font size="4" color="red">动态规划</font></center></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache<span class="token comment" spellcheck="true"># 动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    @lru_cache<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>climbStairs<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>climbStairs<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><hr><table><tr><td bgcolor="00FF7F">给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</td></tr></table><p><strong><center><font size="4" color="red">使用异或操作统计不同元素</font></center></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 异或</span>        res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> res <span class="token operator">^</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> res</code></pre><table><thead><tr><th align="center">符号</th><th align="center">描述</th><th align="center">运算规则</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">与</td><td align="center">两个位都为1时，结果才为1 <strong><em>统计奇数</em></strong></td></tr><tr><td align="center">|</td><td align="center">或</td><td align="center">两个位都为0时，结果才为0 <strong><em>统计偶数</em></strong></td></tr><tr><td align="center">^</td><td align="center">异或</td><td align="center">两个位相同为0，相异为1 <strong><em>常用统计不相同数</em></strong></td></tr></tbody></table><hr><table><tr><td bgcolor="00FF7F">给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</td></tr></table><p><strong><center><font size="4" color="red">如果nums[j]不等于val, 则将nums[j]赋值给nums[i]即可, i自增</font></center></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> i</code></pre><hr><table><tr><td bgcolor="00FF7F">给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。说明：本题中，我们将空字符串定义为有效的回文串。</td></tr></table><p><strong><center><font size="4" color="red">头尾双指针</font></center></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        j <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> j <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token operator">not</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">></span> j<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>                       <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>               <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><hr><table><tr><td bgcolor="00FF7F">给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。</td></tr></table><p><strong><center><font size="4" color="red"> 借用TreeSet（红黑树） O(n)</font></center></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">thirdMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer elem <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> set<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> set<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set.last() 里面最大的元素</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><hr><table><tr><td bgcolor="00FF7F">学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。请你返回至少有多少个学生没有站在正确位置数量。该人数指的是：能让所有学生以 非递减 高度排列的必要移动人数。</td></tr></table><p><strong><center><font size="4" color="red"> 排序，然后比较有多少个位置不同</font></center></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">heightChecker</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> heights<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>heights<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>heights<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heights<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>         java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>heights<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>heights<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>           <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h1 id="面试问答题链接"><a href="#面试问答题链接" class="headerlink" title="面试问答题链接"></a>面试问答题链接</h1><ul><li><a href="https://blog.csdn.net/qq_30225725/article/details/88020157" target="_blank" rel="noopener">java中list，set，map集合的区别，及面试要点</a></li><li></li></ul><hr><h1 id="小知识点与错题"><a href="#小知识点与错题" class="headerlink" title="小知识点与错题"></a>小知识点与错题</h1><ul><li><p>&lt;&lt; 表示左移位; &gt;&gt; 表示带符号右移位; &gt;&gt;&gt; 表示无符号右移; 没有&lt;&lt;&lt; 因为&lt;&lt;后右边总是补0</p></li><li><p>&amp;运算符：两个数都转为二进制，然后从两个数的最高位进行与运算，两个都为真（1），结果才为真（1），否则为假（0）。</p><ul><li>13：01101， 17：10001 结果：00001，既为1</li></ul></li><li><p>并不是静态块最先初始化,而是静态域.(BM：啊!多么痛的领悟!) 而静态域中包含静态变量、静态块和静态方法,其中需要初始化的是静态变量和静态块.而他们两个的初始化顺序是靠他们俩的位置决定的。</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span>  <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> B t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> B t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span>      <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          B t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>  初始化顺序是 t1 t2 静态块</p></li></ul><hr><ul><li>抽象类</li></ul><p>特点:<br>1.抽象类中可以构造方法</p><p>2.抽象类中可以存在普通属性，方法，静态属性和方法。</p><p>3.抽象类中可以存在抽象方法。</p><p>4.如果一个类中有一个抽象方法，那么当前类一定是抽象类；抽象类中不一定有抽象方法。</p><p>5.抽象类中的抽象方法，需要有子类实现，如果子类不实现，则子类也需要定义为抽象的。</p><ul><li>接口</li></ul><p>1.在接口中只有方法的声明，没有方法体。</p><p>2.在接口中只有常量，因为定义的变量，在编译的时候都会默认加上<br>public static final </p><p>3.在接口中的方法，永远都被public来修饰。</p><p>4.接口中没有构造方法，也不能实例化接口的对象。</p><p>5.接口可以实现多继承</p><p>6.接口中定义的方法都需要有实现类来实现，如果实现类不能实现接口中的所有方法,则实现类定义为抽象类</p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span><span class="token keyword">static</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//局部变量</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态变量，int类型 默认初始值为0</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   x<span class="token operator">--</span><span class="token punctuation">;</span>   <span class="token function">myMethod</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">+</span> <span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>  y<span class="token operator">=</span>x<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><ul><li>aa =false</li></ul><hr><ul><li>1如果是本类使用，可以直接就用静态变量名。2如果是其他类使用，可以使用类名来调用，也可以创建一个实例对象来调用。3如果静态变量所在的类是静态类，那么不管在本类里或者在其他外部类，都可以直接使用静态变量名。</li></ul><hr><ul><li><p>try-catch-finally 规则( 异常处理语句的语法规则 ）</p><p>1)  必须在 try 之后添加 catch 或 finally 块。try 块后可同时接 catch 和 finally 块，但至少有一个块。</p><p>2) 必须遵循块顺序：若代码同时使用 catch 和 finally 块，则必须将 catch 块放在 try 块之后。 </p><p>3) catch 块与相应的异常类的类型相关。 </p><p>  4) 一个 try 块可能有多个 catch 块。若如此，则执行第一个匹配块。即Java虚拟机会把实际抛出的异常对象依次和各个catch代码块声明的异常类型匹配，如果异常对象为某个异常类型或 其子类的实例，就执行这个catch代码块，不会再执行其他的 catch代码块<br>  5) 可嵌套 try-catch-finally 结构。<br>  6) 在 try-catch-finally 结构中，可重新抛出异常。<br>  7) 除了下列情况，总将执行 finally 做为结束： JVM 过早终止（调用 System.exit(int)）；在 finally 块中抛出一个未处理的异常；计算机断电、失火、或遭遇病毒攻击</p><p>  由此可以看出，catch只会匹配一个，因为只要匹配了一个，虚拟机就会使整个语句退出</p></li></ul><hr><ul><li><p>1、jps：查看本机java进程信息。</p><p>2、jstack：打印线程的栈信息，制作线程dump文件。</p><p>3、jmap：打印内存映射，制作堆dump文件</p><p>4、jstat：性能监控工具</p><p>5、jhat：内存分析工具</p><p>6、jconsole：简易的可视化控制台</p><p>7、jvisualvm：功能强大的控制台</p></li></ul><hr><ul><li>java object默认的基本方法中没有copy()，含有如下方法：<br>getClass(), hashCode(), equals(), clone(), toString(), notify(), notifyAll(),  wait(), finalize()</li></ul><hr><ul><li><p>结果集(ResultSet)是数据中查询结果返回的一种对象，可以说结果集是一个存储查询结果的对象，但是结果集并不仅仅具有存储的功能，他同时还具有操纵数据的功能，可能完成对数据的更新等。 </p><p>ResultSet跟普通的数组不同，索引从1开始而不是从0开始</p></li></ul><hr><ul><li><p>JDK提供的用于并发编程的同步器有哪些？</p><p>  A，Java 并发库 的Semaphore 可以很轻松完成信号量控制，Semaphore可以控制某个资源可被同时访问的个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。</p><p>  B，CyclicBarrier 主要的方法就是一个：await()。await() 方法没被调用一次，计数便会减少1，并阻塞住当前线程。当计数减至0时，阻塞解除，所有在此 CyclicBarrier 上面阻塞的线程开始运行。</p><p>  C，直译过来就是倒计数(CountDown)门闩(Latch)。倒计数不用说，门闩的意思顾名思义就是阻止前进。在这里就是指 CountDownLatch.await() 方法在倒计数为0之前会阻塞当前线程。</p></li></ul><hr><ul><li>ThreadLocalMap中使用开放地址法来处理散列冲突，而HashMap中使用的是分离链表法.</li></ul><hr><ul><li>java中的i++和++i在java语言层面上来看使用中间量机制，i=i++，i不变，i=++i相当于++i，而结合在一个语句里使用则会报错，因为++后应该跟<font color="red">变量</font></li></ul><hr><ul><li><p>throws 和 throw：</p><p>  throws出现在方法头，表示可能会出现异常；</p><p>  throw是在方法体，抛出了异常，执行throw则一定抛出了某种异常</p></li></ul><hr><ul><li><p>线程同步：喂，SHE<br>  喂（Vector）</p><p>  S（Stack）</p><p>  H（hashtable）</p><p>  E（enumeration）</p></li></ul><hr><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keras</title>
      <link href="/2019/09/26/keras/"/>
      <url>/2019/09/26/keras/</url>
      
        <content type="html"><![CDATA[<p># </p><h1 id="keras-深度学习代码"><a href="#keras-深度学习代码" class="headerlink" title="keras 深度学习代码"></a>keras 深度学习代码</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> keras <span class="token keyword">import</span> optimizers<span class="token keyword">from</span> keras <span class="token keyword">import</span> applications<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential<span class="token punctuation">,</span> Model<span class="token keyword">from</span> keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> ModelCheckpoint<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dropout<span class="token punctuation">,</span> Flatten<span class="token punctuation">,</span> Dense<span class="token keyword">from</span> keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>image <span class="token keyword">import</span> ImageDataGenerator<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> ReduceLROnPlateau</code></pre><pre class=" language-python"><code class="language-python">base_dir <span class="token operator">=</span> <span class="token string">'  '</span>train_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">)</span>validation_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'validation'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">batch_size <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment" spellcheck="true"># 批量大小</span>epochs <span class="token operator">=</span> <span class="token number">40</span>  <span class="token comment" spellcheck="true"># 迭代次数</span>img_height<span class="token punctuation">,</span> img_width <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span>  <span class="token comment" spellcheck="true"># 图片高宽</span>train_data_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 训练集目录</span>validation_data_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'validation'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 测试集目录</span>OUT_CATEGORIES <span class="token operator">=</span> <span class="token number">8</span>  <span class="token comment" spellcheck="true"># 分类数</span>nb_train_samples <span class="token operator">=</span>    <span class="token comment" spellcheck="true"># 训练样本数</span>nb_validation_samples <span class="token operator">=</span>    <span class="token comment" spellcheck="true"># 验证样本数</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义模型</span>base_model <span class="token operator">=</span> applications<span class="token punctuation">.</span>VGG16<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token string">"imagenet"</span><span class="token punctuation">,</span> include_top<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span>img_width<span class="token punctuation">,</span> img_height<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 预训练的VGG19网络，替换掉顶部网络</span>top_model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 自定义顶层网络</span>top_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span>base_model<span class="token punctuation">.</span>output_shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将预训练网络展平</span>top_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 全连接层，</span>top_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Dropout概率0.5</span>top_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>OUT_CATEGORIES<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出层，二分类</span>model <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>base_model<span class="token punctuation">.</span>input<span class="token punctuation">,</span> outputs<span class="token operator">=</span>top_model<span class="token punctuation">(</span>base_model<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 新网络=预训练网络+自定义网络</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'sparse_categorical_crossentropy'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>optimizers<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 损失函数为二进制交叉熵，优化器为SGD</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#数据增强</span>train_datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>      zoom_range<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      rescale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span>      rotation_range<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">,</span>      shear_range<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>      horizontal_flip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>      vertical_flip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>      width_shift_range<span class="token operator">=</span><span class="token number">0.35</span><span class="token punctuation">,</span>      height_shift_range<span class="token operator">=</span><span class="token number">0.35</span><span class="token punctuation">,</span>      fill_mode <span class="token operator">=</span> <span class="token string">'constant'</span><span class="token punctuation">,</span>      cval <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>test_datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>  rescale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">255</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 测试数据预处理器</span>train_generator <span class="token operator">=</span> train_datagen<span class="token punctuation">.</span>flow_from_directory<span class="token punctuation">(</span>train_data_dir<span class="token punctuation">,</span> target_size<span class="token operator">=</span><span class="token punctuation">(</span>img_height<span class="token punctuation">,</span> img_width<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                    batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> class_mode<span class="token operator">=</span><span class="token string">'binary'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 训练数据生成器</span>validation_generator <span class="token operator">=</span> test_datagen<span class="token punctuation">.</span>flow_from_directory<span class="token punctuation">(</span>validation_data_dir<span class="token punctuation">,</span> target_size<span class="token operator">=</span><span class="token punctuation">(</span>img_height<span class="token punctuation">,</span> img_width<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                        batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> class_mode<span class="token operator">=</span><span class="token string">'binary'</span><span class="token punctuation">,</span>                                                        shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 验证数据生成器</span></code></pre><pre class=" language-python"><code class="language-python">filepath<span class="token operator">=</span><span class="token string">'/content/drive/My Drive/vgg/model/VGG19-{epoch:03d}-{val_loss:.4f}-{val_acc:.4f}.h5'</span>checkpointer <span class="token operator">=</span> ModelCheckpoint<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> monitor<span class="token operator">=</span><span class="token string">'val_acc'</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> save_best_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 保存最优模型</span><span class="token comment" spellcheck="true">#降低学习率1</span><span class="token keyword">import</span> keras<span class="token punctuation">.</span>backend <span class="token keyword">as</span> K<span class="token keyword">from</span> keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> LearningRateScheduler<span class="token keyword">def</span> <span class="token function">scheduler</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> epoch  <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        lr <span class="token operator">=</span> K<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>        K<span class="token punctuation">.</span>set_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">,</span> lr <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lr changed to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lr <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> epoch<span class="token operator">==</span><span class="token number">15</span><span class="token punctuation">:</span>        lr <span class="token operator">=</span> K<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>        K<span class="token punctuation">.</span>set_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">,</span> lr <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lr changed to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lr <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> epoch<span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">:</span>        lr <span class="token operator">=</span> K<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>        K<span class="token punctuation">.</span>set_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">,</span> lr <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lr changed to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lr <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> epoch<span class="token operator">==</span><span class="token number">28</span><span class="token punctuation">:</span>        lr <span class="token operator">=</span> K<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>        K<span class="token punctuation">.</span>set_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">,</span> lr <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lr changed to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lr <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> K<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>reduce_lr <span class="token operator">=</span> LearningRateScheduler<span class="token punctuation">(</span>scheduler<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_generator<span class="token punctuation">(</span>train_generator<span class="token punctuation">,</span>                               steps_per_epoch<span class="token operator">=</span>nb_train_samples <span class="token operator">//</span> batch_size<span class="token punctuation">,</span>                               epochs<span class="token operator">=</span>epochs<span class="token punctuation">,</span>                              validation_data<span class="token operator">=</span>validation_generator<span class="token punctuation">,</span>                               validation_steps<span class="token operator">=</span>nb_train_samples <span class="token operator">//</span> batch_size<span class="token punctuation">,</span>                              verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> workers<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>                               class_weight<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span>                              callbacks<span class="token operator">=</span><span class="token punctuation">[</span>checkpointer<span class="token punctuation">,</span>reduce_lr<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 每轮一行输出结果，最大进程12</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> keras </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python笔记</title>
      <link href="/2019/09/23/python/"/>
      <url>/2019/09/23/python/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#一些常用函数">一些常用函数</a></li></ul><h2 id><a href="#" class="headerlink" title></a><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/11/04/KxQQFx.jpg" alt="Python编程：从入门到实践"></h2><h1 id="变量和简单数字类型"><a href="#变量和简单数字类型" class="headerlink" title="变量和简单数字类型"></a><center>变量和简单数字类型</center></h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>单双引号都可</li></ul><blockquote><p>使用方法修改字符串的大小写</p></blockquote><ul><li><strong>title( )</strong> 以首字母大写的方式显示每个单词</li><li>将字符串改为全部大写或全部小写：<strong>upper( )</strong>，<strong>lower( )</strong></li></ul><blockquote><p>合并（拼接）字符串</p></blockquote><ul><li>使用加号（+）来合并字符串</li></ul><blockquote><p>使用制表符或换行符来添加空白</p></blockquote><ul><li>制表符 \t <br> 换行符 \n <br> </li></ul><blockquote><p>删除空白</p></blockquote><ul><li>删除字符串开头的空白 <strong>lstrip( )</strong> <br><br>删除字符串末尾的空白 <strong>rstrip( )</strong>  <br><br>同时删除字符串两端的空白 <strong>strip( )</strong></li></ul><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><ul><li>使用两个乘号表示乘方运算 3**2 = 9</li><li>将非字符串值表示为字符串 <strong>str( )</strong></li></ul><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a><center>列表</center></h1><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><ul><li>列表是有序集合<pre class=" language-python"><code class="language-python">  bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>bicycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li>索引从0 而不是1 开始</li><li>将索引指定为-1，可让返回最后一个列表元素</li></ul><h2 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h2><pre class=" language-python"><code class="language-python">motorcycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'yamaha'</span><span class="token punctuation">,</span> <span class="token string">'suzuki'</span><span class="token punctuation">]</span></code></pre><blockquote><p> 修改</p></blockquote><blockquote><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3></blockquote><ol><li>末尾添加：<strong>append( )</strong><pre class=" language-python"><code class="language-python"> motorcycles<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'ducati'</span><span class="token punctuation">)</span></code></pre></li><li>在列表中插入元素：<strong>insert( )</strong> <pre class=" language-python"><code class="language-python"> motorcycles<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'ducati'</span><span class="token punctuation">)</span></code></pre></li></ol><blockquote><h3 id="从列表中删除元素"><a href="#从列表中删除元素" class="headerlink" title="从列表中删除元素"></a>从列表中删除元素</h3></blockquote><ul><li><p>使用<strong>del</strong>语句删除元素</p><pre class=" language-python"><code class="language-python">  <span class="token keyword">del</span> motorcycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">del</span> motorcycles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  </code></pre></li><li><p>使用方法 <strong>pop( )</strong> 删除元素(可删除列表末尾的元素)</p><pre class=" language-python"><code class="language-python">  popped_motorcycle <span class="token operator">=</span> motorcycles<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>popped_motorcycle<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'yamaha'</span><span class="token punctuation">,</span> <span class="token string">'suzuki'</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'yamaha'</span><span class="token punctuation">]</span>  suzuki</code></pre></li><li><p>弹出列表中任何位置处的元素</p><pre class=" language-python"><code class="language-python">  pop<span class="token punctuation">(</span>索引<span class="token punctuation">)</span></code></pre></li><li><p>根据值删除元素 <strong>remove( )</strong></p><pre class=" language-python"><code class="language-python">  motorcycles<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'ducati'</span><span class="token punctuation">)</span></code></pre><blockquote><p>方法remove( )只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</p></blockquote></li></ul><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><ul><li><p>使用方法<strong>sort( )</strong>对列表进行<strong>永久</strong>性排序</p><ul><li>与字母顺序相反的顺序排列列表元素 <strong>sort(reverse=True)</strong></li></ul></li><li><p>使用函数<strong>sorted( )</strong>对列表进行<strong>临时</strong>排序</p><ul><li>与字母顺序相反的顺序排列列表元素 <strong>sorted(reverse=True)</strong></li></ul></li><li><p>反转<strong>列表元素</strong>的排列顺序 <strong>reverse( )</strong></p></li><li><p>确定列表的长度 <strong>len( )</strong></p></li><li><p>取得某个值的索引<strong>index(target)</strong></p></li></ul><hr><h1 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a><center>操作列表</center></h1><h2 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h2><blockquote><p><strong>range( )</strong> </p></blockquote><pre class=" language-python"><code class="language-python">range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#指定步长</span></code></pre><ul><li>函数<strong>range( )</strong>让Python从你指定的第一个值开始数，在到达你指定的第二个索引<strong>前面</strong>的元素后停止<pre class=" language-python"><code class="language-python"> <span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-----------------------    </span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span></code></pre></li></ul><blockquote><p>使用函数<strong>list( )</strong> 将<strong>range( )</strong> 的结果直接转换为列表</p></blockquote><blockquote><p>对数字列表执行简单的统计计算</p></blockquote><pre class=" language-python"><code class="language-python">min<span class="token punctuation">(</span><span class="token punctuation">)</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>列表解析</p></blockquote><pre class=" language-python"><code class="language-python">squares <span class="token operator">=</span> <span class="token punctuation">[</span>value<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#------------------</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span></code></pre><h2 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h2><blockquote><p>切片</p></blockquote><pre class=" language-python"><code class="language-python">players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'charles'</span><span class="token punctuation">,</span> <span class="token string">'martina'</span><span class="token punctuation">,</span> <span class="token string">'michael'</span><span class="token punctuation">,</span> <span class="token string">'florence'</span><span class="token punctuation">,</span> <span class="token string">'eli'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>遍历切片</p></blockquote><pre class=" language-python"><code class="language-python">players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'charles'</span><span class="token punctuation">,</span> <span class="token string">'martina'</span><span class="token punctuation">,</span> <span class="token string">'michael'</span><span class="token punctuation">,</span> <span class="token string">'florence'</span><span class="token punctuation">,</span> <span class="token string">'eli'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Here are the first three players on my team:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> player <span class="token keyword">in</span> players<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>复制列表</p></blockquote><ul><li>要复制列表，可创建一个包含整个列表的切片<pre class=" language-python"><code class="language-python">  my_foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pizza'</span><span class="token punctuation">,</span> <span class="token string">'falafel'</span><span class="token punctuation">,</span> <span class="token string">'carrot cake'</span><span class="token punctuation">]</span>  friend_foods <span class="token operator">=</span> my_foods<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code></pre></li><li>倘若只是简单地将my_foods赋给friend_foods，就不能得到两个列表<pre class=" language-python"><code class="language-python">  my_foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pizza'</span><span class="token punctuation">,</span> <span class="token string">'falafel'</span><span class="token punctuation">,</span> <span class="token string">'carrot cake'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#这行不通</span>  friend_foods <span class="token operator">=</span> my_foods</code></pre><blockquote><p>这里将my_foods赋给friend_foods，而不是将my_foods的副本存储到friend_foods。这种语法实际上是让Python将新变量friend_foods关联到包含在my_foods中的列表，因此这两个变量都指向同一个列表</p></blockquote></li></ul><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>Python将<strong>不能修改</strong>的值称为不可变的，而不可变的列表被称为<strong>元组</strong>。</p><h2 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h2><ul><li>使用圆括号而不是方括号</li></ul><h2 id="遍历元组中的所有值-for循环"><a href="#遍历元组中的所有值-for循环" class="headerlink" title="遍历元组中的所有值 for循环"></a>遍历元组中的所有值 <strong>for循环</strong></h2><h2 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h2><ul><li>虽然不能修改元组的元素，但可以给存储元组的变量赋值<pre class=" language-python"><code class="language-python">  dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>  dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></code></pre></li></ul><hr><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><center>if语句</center></h1><hr><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a><center>字典</center></h1><h2 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h2><ul><li>字典是一系列<strong>键—值</strong>对,每个<strong>键</strong>都与一个值相关联，你可以使用键来访问与之<br>相关联的值。与键相关联的<strong>值</strong>可以是数字、字符串、列表乃至字典。<pre class=" language-python"><code class="language-python">  alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h3><ul><li>要获取与键相关联的值，可依次指定字典名和放在方括号内的键<pre class=" language-python"><code class="language-python">  alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">}</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>alien_0<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="添加键–值对"><a href="#添加键–值对" class="headerlink" title="添加键–值对"></a>添加键–值对</h3><ul><li>字典是一种动态结构，可随时在其中添加键—值对。要添加键—值对，可依次指定字典名、用<br>方括号括起的键和相关联的值。<pre class=" language-python"><code class="language-python">  alien_0<span class="token punctuation">[</span><span class="token string">'x_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  alien_0<span class="token punctuation">[</span><span class="token string">'y_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#----------------------</span>  <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'y_position'</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'x_position'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre></li><li>Python不关心键—值对的添加顺序，而只关心键和值之间的关联关系。</li></ul><h3 id="创建一个空字典"><a href="#创建一个空字典" class="headerlink" title="创建一个空字典"></a>创建一个空字典</h3><ul><li>使用一对空的花括号定义一个字典</li></ul><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><ul><li>要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值<pre class=" language-python"><code class="language-python">  alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">}</span>  alien_0<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'yellow'</span></code></pre></li></ul><h3 id="删除键–值对"><a href="#删除键–值对" class="headerlink" title="删除键–值对"></a>删除键–值对</h3><ul><li>使用del语句将相应的键—值对彻底删除,使用del语句时，必须指定字典名和要删除的键。<pre class=" language-python"><code class="language-python">  alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>  <span class="token keyword">del</span> alien_0<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span></code></pre></li></ul><h3 id="由类似对象组成的字典"><a href="#由类似对象组成的字典" class="headerlink" title="由类似对象组成的字典"></a>由类似对象组成的字典</h3><ul><li>你也可以使用字典来存储众多对象的同一种信息<pre class=" language-python"><code class="language-python">  favorite_languages <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>      <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>      <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span></code></pre></li></ul><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><h3 id="遍历所有的键—值对"><a href="#遍历所有的键—值对" class="headerlink" title="遍历所有的键—值对"></a>遍历所有的键—值对</h3><ul><li>方法<strong>items( )</strong>,它返回一个键—值对列表<pre class=" language-python"><code class="language-python">  user_0 <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'efermi'</span><span class="token punctuation">,</span>      <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'enrico'</span><span class="token punctuation">,</span>      <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'fermi'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>  <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_0<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nKey: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Value: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span></code></pre></li></ul><h3 id="遍历字典中的所有键"><a href="#遍历字典中的所有键" class="headerlink" title="遍历字典中的所有键"></a>遍历字典中的所有键</h3><ul><li>方法<strong>keys( )</strong>,返回一个键列表<pre class=" language-python"><code class="language-python">  favorite_languages <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>      <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>      <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>  <span class="token keyword">for</span> name <span class="token keyword">in</span> favorite_languages<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li>方法<strong>keys( )</strong>并非只能用于遍历；实际上，它返回一个列表，其中包含字典中的所有键    </li></ul><h3 id="按顺序遍历字典中的所有键"><a href="#按顺序遍历字典中的所有键" class="headerlink" title="按顺序遍历字典中的所有键"></a>按顺序遍历字典中的所有键</h3><ul><li><p>使用函数sorted()来获得按特定顺序排列的键列表的副本</p><pre class=" language-python"><code class="language-python">  <span class="token keyword">for</span> name <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>favorite_languages<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", thank you for taking the poll."</span><span class="token punctuation">)</span></code></pre><h3 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h3></li><li><p>方法<strong>values( )</strong>,返回一个值列表</p></li><li><p>最终的列表可能包含大量的重复项。为剔除重复项，可使用集合<strong>set</strong>。集合类似于列表，但每个元素都必须是独一无二的</p><pre class=" language-python"><code class="language-python">  favorite_languages <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>      <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>      <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>  <span class="token keyword">for</span> language <span class="token keyword">in</span> set<span class="token punctuation">(</span>favorite_languages<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>language<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>通过对包含重复元素的列表调用<strong>set()</strong>,可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合</p></blockquote></li></ul><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><h3 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h3><pre class=" language-python"><code class="language-python">alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>alien_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span>alien_2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span>aliens <span class="token operator">=</span> <span class="token punctuation">[</span>alien_0<span class="token punctuation">,</span> alien_1<span class="token punctuation">,</span> alien_2<span class="token punctuation">]</span><span class="token keyword">for</span> alien <span class="token keyword">in</span> aliens<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>alien<span class="token punctuation">)</span></code></pre><h3 id="在字典中存储列表"><a href="#在字典中存储列表" class="headerlink" title="在字典中存储列表"></a>在字典中存储列表</h3><ul><li>当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 存储所点比萨的信息</span>pizza <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'crust'</span><span class="token punctuation">:</span> <span class="token string">'thick'</span><span class="token punctuation">,</span>  <span class="token string">'toppings'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="在字典中存储字典"><a href="#在字典中存储字典" class="headerlink" title="在字典中存储字典"></a>在字典中存储字典</h3><pre class=" language-python"><code class="language-python">users <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'aeinstein'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'albert'</span><span class="token punctuation">,</span>        <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'einstein'</span><span class="token punctuation">,</span>        <span class="token string">'location'</span><span class="token punctuation">:</span> <span class="token string">'princeton'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'mcurie'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'marie'</span><span class="token punctuation">,</span>        <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'curie'</span><span class="token punctuation">,</span>        <span class="token string">'location'</span><span class="token punctuation">:</span> <span class="token string">'paris'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><hr><h1 id="用户输入和while循环"><a href="#用户输入和while循环" class="headerlink" title="用户输入和while循环"></a><center>用户输入和while循环</center></h1><h2 id="函数input"><a href="#函数input" class="headerlink" title="函数input( )"></a>函数<strong>input( )</strong></h2><ul><li>python将用户输入解读为字符串</li><li>函数<strong>input( )</strong> 接受一个参数：向用户显示的提示或说明(显示-&gt;输入)<pre class=" language-python"><code class="language-python">  name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"please enter your name: "</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"hello,"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span></code></pre></li><li><pre class=" language-python"><code class="language-python">prompt <span class="token operator">=</span> <span class="token string">"If you tell us who you are, we can personalize the messages you see."</span>prompt <span class="token operator">+=</span> <span class="token string">"\nWhat is your first name? "</span></code></pre><blockquote><p>运算符 += 在存储在prompt中的字符串末尾附加一个字符串</p></blockquote></li></ul><h3 id="使用int-获取数值输入"><a href="#使用int-获取数值输入" class="headerlink" title="使用int( ) 获取数值输入"></a>使用<strong>int( )</strong> 获取数值输入</h3><ul><li><pre class=" language-python"><code class="language-python">height <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"How tall are you, in inches? "</span><span class="token punctuation">)</span>height <span class="token operator">=</span> int<span class="token punctuation">(</span>height<span class="token punctuation">)</span></code></pre></li></ul><blockquote><p>求模运算符 %</p></blockquote><h2 id="使用while循环处理列表"><a href="#使用while循环处理列表" class="headerlink" title="使用while循环处理列表"></a>使用while循环处理列表</h2><blockquote><p>列表之间移动元素</p></blockquote><ul><li><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 首先，创建一个待验证用户列表</span>  <span class="token comment" spellcheck="true"># 和一个用于存储已验证用户的空列表</span>  unconfirmed_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alice'</span><span class="token punctuation">,</span> <span class="token string">'brian'</span><span class="token punctuation">,</span> <span class="token string">'candace'</span><span class="token punctuation">]</span>  confirmed_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 验证每个用户，直到没有未验证用户为止</span>  <span class="token comment" spellcheck="true"># 将每个经过验证的列表都移到已验证用户列表中</span>  <span class="token keyword">while</span> unconfirmed_users<span class="token punctuation">:</span>      current_user <span class="token operator">=</span> unconfirmed_users<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Verifying user: "</span> <span class="token operator">+</span> current_user<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      confirmed_users<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_user<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 显示所有已验证的用户</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nThe following users have been confirmed:"</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> confirmed_user <span class="token keyword">in</span> confirmed_users<span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>confirmed_user<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><blockquote><p>删除包含特定值的所有列表元素</p></blockquote><ul><li><pre class=" language-python"><code class="language-python">  pets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'goldfish'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'rabbit'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">]</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>pets<span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token string">'cat'</span> <span class="token keyword">in</span> pets<span class="token punctuation">:</span>      pets<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-----------------------</span>  <span class="token punctuation">[</span><span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'goldfish'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'rabbit'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'goldfish'</span><span class="token punctuation">,</span> <span class="token string">'rabbit'</span><span class="token punctuation">]</span></code></pre></li></ul><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a><center>函数</center></h1><h2 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h2><blockquote><p>位置实参 <strong>位置实参的顺序很重要</strong></p></blockquote><ul><li><pre class=" language-python"><code class="language-python">  <span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""显示宠物的信息"""</span>  describe_pet<span class="token punctuation">(</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> <span class="token string">'harry'</span><span class="token punctuation">)</span></code></pre></li></ul><blockquote><p>关键字实参 <strong>关键字实参的顺序无关紧要</strong></p></blockquote><ul><li><pre class=" language-python"><code class="language-python">  <span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""显示宠物的信息"""</span>  describe_pet<span class="token punctuation">(</span>animal_type<span class="token operator">=</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> pet_name<span class="token operator">=</span><span class="token string">'harry'</span><span class="token punctuation">)</span></code></pre></li></ul><blockquote><p>默认值 <strong>在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参</strong></p></blockquote><ul><li><p>给形参指定默认值时，等号两边不要有空格</p></li><li><pre class=" language-python"><code class="language-python">  <span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>pet_name<span class="token punctuation">,</span> animal_type<span class="token operator">=</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""显示宠物的信息"""</span>  describe_pet<span class="token punctuation">(</span>pet_name<span class="token operator">=</span><span class="token string">'willie'</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="在函数中修改列表"><a href="#在函数中修改列表" class="headerlink" title="在函数中修改列表"></a>在函数中修改列表</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_models</span><span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">,</span> completed_models<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    模拟打印每个设计，直到没有未打印的设计为止    打印每个设计后，都将其移到列表completed_models中    """</span><span class="token keyword">def</span> <span class="token function">show_completed_models</span><span class="token punctuation">(</span>completed_models<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""显示打印好的所有模型"""</span>unprinted_designs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'iphone case'</span><span class="token punctuation">,</span> <span class="token string">'robot pendant'</span><span class="token punctuation">,</span> <span class="token string">'dodecahedron'</span><span class="token punctuation">]</span>completed_models <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>print_models<span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">,</span> completed_models<span class="token punctuation">)</span>show_completed_models<span class="token punctuation">(</span>completed_models<span class="token punctuation">)</span>    </code></pre><h2 id="禁止函数修改列表"><a href="#禁止函数修改列表" class="headerlink" title="禁止函数修改列表"></a>禁止函数修改列表</h2><p>向函数传递列表的<strong>副本</strong>而不是原件；这样函数所做的任何修改都只影响副本，而丝毫不影响原件</p><pre class=" language-python"><code class="language-python">print_models<span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> completed_models<span class="token punctuation">)</span></code></pre><blockquote><p>虽然向函数传递列表的副本可保留原始列表的内容，但除非有充分的理由需要传递副本，否<br>则还是应该将原始列表传递给函数，因为让函数使用现成列表可避免花时间和内存创建副本，从<br>而提高效率，在处理大型列表时尤其如此。</p></blockquote><h2 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span><span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""打印顾客点的所有配料"""</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>toppings<span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token string">'pepperoni'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><blockquote><p>形参名<em>toppings中的*</em>星号<strong>让Python创建一个名为toppings的</strong>空元组<strong>，并将收到的所有值都封装到这个</strong>元组**中</p></blockquote><blockquote><p>结合使用位置实参和任意数量实参</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""概述要制作的比萨"""</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'pepperoni'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><blockquote><p>使用任意数量的关键字实参</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_profile</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> <span class="token operator">**</span>user_info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个字典，其中包含我们知道的有关用户的一切"""</span>    profile <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    profile<span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> first    profile<span class="token punctuation">[</span><span class="token string">'last_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> last    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        profile<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> profileuser_profile <span class="token operator">=</span> build_profile<span class="token punctuation">(</span><span class="token string">'albert'</span><span class="token punctuation">,</span> <span class="token string">'einstein'</span><span class="token punctuation">,</span>                                location<span class="token operator">=</span><span class="token string">'princeton'</span><span class="token punctuation">,</span>                                field<span class="token operator">=</span><span class="token string">'physics'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>user_profile<span class="token punctuation">)</span>   </code></pre><blockquote><p>形参*<em>user_info中的*</em>两个星号<strong>让Python创建一个名为user_info的</strong>空字典<strong>，并将收到的所有名称—值对都封装到这个</strong>字典**中</p></blockquote><h2 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h2><blockquote><p>导入整个模块</p></blockquote><ul><li><p>如果使用import语句导入了整个模块，使用下面的语法来使用其中任何一个函数：</p><blockquote><p>module_name.function_name()</p></blockquote></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pizza.py</span><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""概述要制作的比萨"""</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pizzapizza<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'pepperoni'</span><span class="token punctuation">)</span>pizza<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><blockquote><p>导入特定的函数</p></blockquote><ul><li><blockquote><p>from module_name import function_0, function_1, function_2</p></blockquote></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pizza <span class="token keyword">import</span> make_pizzamake_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'pepperoni'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><blockquote><p>使用as 给函数指定别名</p></blockquote><ul><li>如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名 </li></ul><blockquote><p>导入模块中的所有函数</p></blockquote><ul><li>使用星号（*）运算符可让Python导入模块中的所有函数</li></ul><h3 id="如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开"><a href="#如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开" class="headerlink" title="如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开"></a>如果程序或模块包含多个函数，可使用<strong>两个空行</strong>将相邻的函数分开</h3><hr><h1 id="类"><a href="#类" class="headerlink" title="类"></a><center>类</center></h1><h2 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h2><p><strong>三种方式</strong></p><ul><li>直接通过实例进行修改</li><li>通过方法进行设置</li><li>通过方法进行递增（增加特定的值）<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""初始化描述汽车的属性"""</span>      self<span class="token punctuation">.</span>make <span class="token operator">=</span> make      self<span class="token punctuation">.</span>model <span class="token operator">=</span> model      self<span class="token punctuation">.</span>year <span class="token operator">=</span> year      self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>   <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""打印一条指出汽车里程的消息"""</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -----------------------       </span>my_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>my_new_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><blockquote><ol><li>直接修改属性的值</li></ol></blockquote><pre class=" language-python"><code class="language-python">my_new_car<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">23</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><ol start="2"><li>通过方法修改属性的值</li></ol></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>    <span class="token keyword">def</span> <span class="token function">update_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mileage<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        将里程表读数设置为指定的值        禁止将里程表读数往回调        """</span>        <span class="token keyword">if</span> mileage <span class="token operator">>=</span> self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> mileage        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't roll back an odometer!"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#------------------------------------------</span>my_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>my_new_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>update_odometer<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span>        </code></pre><blockquote><ol start="3"><li>通过方法对属性的值进行递增</li></ol></blockquote><pre class=" language-python"><code class="language-python"></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""一次模拟汽车的简单尝试"""</span>    <span class="token comment" spellcheck="true">#----------------------</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""电动汽车的独特之处"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化父类的属性"""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#----------------------</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span> <span class="token string">'model s'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>my_tesla<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>创建子类时，父类必须包含在当前文件中，且位于子类前面</li><li>定义子类时，必须在括号内指定父类的名称</li></ul><blockquote><ol><li>给子类定义属性和方法</li></ol></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""一次模拟汽车的简单尝试"""</span>    <span class="token comment" spellcheck="true">#----------------------</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""电动汽车的独特之处"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化父类的属性"""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> <span class="token number">70</span>    <span class="token keyword">def</span> <span class="token function">describe_battery</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""打印一条描述电瓶容量的消息"""</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"This car has a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>battery_size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-kWh battery."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#----------------------</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span> <span class="token string">'model s'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>my_tesla<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><ol start="2"><li>重写父类的方法</li></ol></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>    <span class="token keyword">def</span> <span class="token function">fill_gas_tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""电动汽车没有油箱"""</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"This car doesn't need a gas tank!"</span><span class="token punctuation">)</span></code></pre><blockquote><ol start="3"><li>将实例用作属性</li></ol></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">Battery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""一次模拟电动汽车电瓶的简单尝试"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> battery_size<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化电瓶的属性"""</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> battery_size    <span class="token keyword">def</span> <span class="token function">describe_battery</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""打印一条描述电瓶容量的消息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>battery_size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-kWh battery."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化父类的属性"""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery <span class="token operator">=</span> Battery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#----------------------</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span> <span class="token string">'model s'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>my_tesla<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>battery<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在实例my_tesla中查找属性battery，并对存储在该属性中的Battery实例调用方法describe_battery()</p><h2 id="类编码风格"><a href="#类编码风格" class="headerlink" title="类编码风格"></a>类编码风格</h2><p><strong>类名</strong>应采用<strong>驼峰命名法</strong>，即将类名中的<strong>每个单词的首字母</strong>都大写，而不使用下划线。<strong>实例名和模块名</strong>都采用<strong>小写</strong>格式，并在单词之间加上下划线</p><hr><h1 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a><center>文件和异常</center></h1><h2 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h2><h3 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h3><pre class=" language-python"><code class="language-python">pi_digits<span class="token punctuation">.</span>txt<span class="token number">3.1415926535</span>   <span class="token number">8979323846</span>   <span class="token number">2643383279</span><span class="token comment" spellcheck="true">#--------------</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'pi_digits.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    contents <span class="token operator">=</span> file_object<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>contents<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>read()到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行</p><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><pre><code>python_work--    |    |--sfile_reader.py    |--text_files        |--pi_digits.txt</code></pre><p><strong>相对文件路径</strong>：相对于当前运行的程序所在目录的</p><p><strong>绝对文件路径</strong>：文件在计算机中的准确位置</p><ul><li><p><strong>Linux</strong><br></p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'text_files/filename.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span></code></pre></li><li><p><strong>Windows</strong><br></p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'text_files\filename.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span></code></pre></li></ul><p>Windows系统中，在文件路径中使用反斜杠（\）而不是斜杠（/）</p><h3 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h3><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'pi_digits.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> file_object<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h2><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'pi_digits.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    lines <span class="token operator">=</span> file_object<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>方法readlines()从文件中读取每一行，并将其存储在一个列表中</p><h3 id="使用文件的内容"><a href="#使用文件的内容" class="headerlink" title="使用文件的内容"></a>使用文件的内容</h3><p>读取文本文件时，Python将其中的所有文本都解读为<strong>字符串</strong>。</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><h3 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h3><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'programming.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love programming."</span><span class="token punctuation">)</span></code></pre><p>打开文件时，可指定</p><ul><li>读取模式(‘r’）</li><li>写入模式(‘w’)</li><li>附加模式(‘a’)</li><li>读取和写入文件的模式(‘r+’)</li></ul><p>如果要写入的文件不存在，函数open()将自动创建它</p><p>以写入（’w’）模式打开文件时千万要小心，因为如果指定的文件已经存在，Python将在返回文件对象前清空该文件。</p><p>Python只能将字符串写入文本文件</p><h3 id="写入多行"><a href="#写入多行" class="headerlink" title="写入多行"></a>写入多行</h3><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'programming.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love programming.\n"</span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love creating new games.\n"</span><span class="token punctuation">)</span></code></pre><h3 id="附加到文件"><a href="#附加到文件" class="headerlink" title="附加到文件"></a>附加到文件</h3><p>以附加模式打开文件时，Python不会在返回文件对象前清空文件，而写入到文件的行都将添加到文件末尾</p><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'programming.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I also love finding meaning in large datasets.\n"</span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love creating apps that can run in a browser.\n"</span><span class="token punctuation">)</span></code></pre><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="分析文本"><a href="#分析文本" class="headerlink" title="分析文本"></a>分析文本</h3><p>方法<strong>split()</strong>以空格为分隔符将字符串分拆成多个部分，并将这些部分都存储到一个列表中。</p><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p><strong>json.dump()</strong>和<strong>json.load()</strong></p><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a><center>测试代码</center></h1><h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2><h3 id="单元测试和测试用例"><a href="#单元测试和测试用例" class="headerlink" title="单元测试和测试用例"></a>单元测试和测试用例</h3><p><strong>单元测试</strong>用于核实函数的某个方面没有问题</p><p><strong>测试用例</strong>是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求</p><p>方法名必须以<strong>test_</strong>打头，这样它才会在运行test_name_function.py时自动运行</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">from</span> name_function <span class="token keyword">import</span> get_formatted_name<span class="token keyword">class</span> <span class="token class-name">NamesTestCase</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""测试name_function.py """</span>    <span class="token keyword">def</span> <span class="token function">test_first_last_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""能够正确地处理像Janis Joplin这样的姓名吗？"""</span>    formatted_name <span class="token operator">=</span> get_formatted_name<span class="token punctuation">(</span><span class="token string">'janis'</span><span class="token punctuation">,</span> <span class="token string">'joplin'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>formatted_name<span class="token punctuation">,</span> <span class="token string">'Janis Joplin'</span><span class="token punctuation">)</span></code></pre><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><hr><center><table><td bgcolor="PaleGreen"> 一些常用函数</td></table></center><h1 id="一些常用函数"><a href="#一些常用函数" class="headerlink" title="一些常用函数"></a>一些常用函数</h1><ol><li><font color="red">Python判断字符串是否为字母或者数字</font><ul><li>字符串.<font color="#6495ED">isalnum()</font>  所有字符都是数字或者字母，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">isalpha()</font>   所有字符都是字母，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">isdigit()</font>   所有字符都是数字，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">islower()</font>   所有字符都是小写，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">isupper()</font>   所有字符都是大写，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">istitle()</font>   所有单词都是首字母大写，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">isspace()</font>   所有字符都是空白字符，为真返回 Ture，否则返回 False。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他</title>
      <link href="/2019/09/16/qi-ta/"/>
      <url>/2019/09/16/qi-ta/</url>
      
        <content type="html"><![CDATA[<center><div id="weather-view-he"></div><script>WIDGET = {ID: 'ggduimj82w'};</script><script type="text/javascript" src="https://apip.weatherdt.com/view/static/js/r.js?v=1111"></script></center>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图片标注工具LabelImg</title>
      <link href="/2019/09/16/tu-pian-biao-zhu-gong-ju-labelimg/"/>
      <url>/2019/09/16/tu-pian-biao-zhu-gong-ju-labelimg/</url>
      
        <content type="html"><![CDATA[<h1 id="图片标注工具LabelImg的安装及使用方法"><a href="#图片标注工具LabelImg的安装及使用方法" class="headerlink" title="图片标注工具LabelImg的安装及使用方法"></a>图片标注工具LabelImg的安装及使用方法</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>百度云<a href="https://pan.baidu.com/s/15vy4367JYusVNNX-13RJzA" target="_blank" rel="noopener">地址</a> 提取码: ivdc </p><h2 id="anaconda-prompt命令行安装"><a href="#anaconda-prompt命令行安装" class="headerlink" title="anaconda prompt命令行安装"></a>anaconda prompt命令行安装</h2><pre><code>pip3 install labelImg</code></pre><p>打开,命令行输入</p><pre><code>labelimg</code></pre><hr><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li>修改默认的XML文件保存位置，使用快捷键“Ctrl+R”，改为自定义位置，这里的路径一定不能包含中文，否则无法保存</li><li>快捷键：<br>画框 w ;<br>保存 ctrl+s；<br>下一张图片 d；<br>上一张图片 a；<br>复制当前标签和矩形框 ctrl+d ；<br>标记当前图片已标记 Space</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> labelImg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌colab</title>
      <link href="/2019/09/04/gu-ge-colab/"/>
      <url>/2019/09/04/gu-ge-colab/</url>
      
        <content type="html"><![CDATA[<h1 id="Google-Colab简介"><a href="#Google-Colab简介" class="headerlink" title="Google Colab简介"></a>Google Colab简介</h1><p>Google Colaboratory是谷歌开放的一款研究工具，主要用于机器学习的开发和研究。这款工具现在可以免费使用，但是不是永久免费暂时还不确定。Google Colab最大的好处是给广大的AI开发者提供了免费的GPU使用！GPU型号是Tesla K80！你可以在上面轻松地跑例如：Keras、Tensorflow、Pytorch等框架。</p><h2 id="挂载云盘"><a href="#挂载云盘" class="headerlink" title="挂载云盘"></a>挂载云盘</h2><blockquote><p>from google.colab import drive<br><br>drive.mount(‘/content/drive/‘)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 谷歌colab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java笔记</title>
      <link href="/2019/08/30/java-bi-ji/"/>
      <url>/2019/08/30/java-bi-ji/</url>
      
        <content type="html"><![CDATA[<div id="weather-view-he"></div><script>WIDGET = {ID: 'ggduimj82w'};</script><script type="text/javascript" src="https://apip.weatherdt.com/view/static/js/r.js?v=1111"></script># Java基础知识(笔记)**java 基本数据类型**<table><thead><tr><th align="center">类型</th><th align="center">位数</th><th align="center">类型</th><th align="center">位数</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">8</td><td align="center">int</td><td align="center">32</td></tr><tr><td align="center">char</td><td align="center">16</td><td align="center">long</td><td align="center">64</td></tr><tr><td align="center">byte</td><td align="center">8</td><td align="center">float</td><td align="center">32</td></tr><tr><td align="center">short</td><td align="center">16</td><td align="center">double</td><td align="center">64</td></tr></tbody></table><p><strong>类修饰词</strong></p><p>public：定义的类可以被java的所有软件包使用</p><p>abstract：抽象类</p><p>final：定义的列不能用作父类</p><p>在同一个java源文件中可以包含多个类，但不能包含两个或者两个以上的具有public修饰词的类。</p><p>面向对象的技术的3大特性：<strong>继承性</strong>，<strong>封装性</strong>，<strong>多态性</strong>。</p><p><strong>静态多态性</strong>指的是在同一个类中通脉那个方法在功能上的重载。</p><p><strong>动态多态性</strong>指的是在子类和父类的类体重均定义了具有基本相同声明的费静态成员方法。</p><hr><p>数组元素的下标值从0开始。</p><h1 id="数组，字符串，向量与哈希表"><a href="#数组，字符串，向量与哈希表" class="headerlink" title="数组，字符串，向量与哈希表"></a>数组，字符串，向量与哈希表</h1><blockquote><p>Vector&lt;向量元素的数据类型&gt; 变量名</p></blockquote><p><strong>引用数据类型</strong>：类(calss)，接口(interface)，枚举(enum)，数组(array)。</p><p><strong>基本数据类型</strong>：布尔，字符，字节，短整数，整数，长整数，单精度浮点数，双精度浮点数。</p><p><strong>向量</strong>：Vector&lt;数据类型&gt; 变量名；数据类型必须是引用数据类型。</p><hr><ul><li><strong>静态代码块</strong>：随着类的加载而执行，而且只执行一次。静态代码块的执行顺序优先于main函数。</li></ul><p>转<a href="https://blog.csdn.net/sinat_33921105/article/details/79509638" target="_blank" rel="noopener">静态代码块—学会这个就够了</a></p><ul><li><p>运行java应用程序时，实际的代码运行之前的一个步骤是加载类，如果类中有静态成员，加载类时会在heap中为其分配空间，此空间是属于类的。类中的非静态成员（实例成员）是和类的对象绑定的，它们属于对象在heap中的空间。静态成员不能访问非静态成员，因为静态成员在类加载完成后已经存在于heap中了，但是如果没创建对象的话非静态成员是不存在的，所以在代码中有引用时会发生编译错误。反过来说，非静态成员可以访问静态成员，因为当非静态成员存在于heap中时，静态成员肯定已经存在于heap中了。</p></li><li><p><strong>static 声明的变量和方法在类中共享的</strong>，当使用static修饰变量时，<strong>在类中是共享</strong>。例如：在下列代码中定义静态变量i = 10时，当类创建了多个对象时，其中一个对象修改了i的值（ts1.i = 100）,其他对象ts2、ts3调用i值时，会出现i值都是100，说明静态变量i是共享。 <strong>非静态变量</strong>：当类中创建多个对象时，非静态变量在内存中直接分布各个新创建的对象中。所以当修改某个对象引用的变量值时，其他对象在引用变量时，没有发生改变。例如：j =20 ；ts1.j = 15;此时ts1对象输出 j=15 .而输出的ts2.j=20,ts3.j=20跟初始定义的j一样;</p></li><li><p>静态成员方法采用通过类名的方法调用“Thread.sleep()”和采用实例对象的调用sleep成员方法在效果上是一样的。<br>假设A和B分别是两个不同的线程，而线程B执行到下面的语句</p><blockquote><p>A.sleep(1000);</p></blockquote><p>则进入睡眠状态的是线程B，而不是线程A。</p></li><li><p>段落一</p><p>小段一</p></li><li><p>段落二</p><p>小段二</p></li></ul><hr><h1 id="多线程程序设计"><a href="#多线程程序设计" class="headerlink" title="多线程程序设计"></a>多线程程序设计</h1><p><strong>线程的生命周期</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://pxyr7adce.bkt.clouddn.com/img/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="线程的生命周期" title="线程的生命周期"></p><h2 id="多线程同步"><a href="#多线程同步" class="headerlink" title="多线程同步"></a>多线程同步</h2><p>java虚拟机通过给每个<strong>对象</strong>加锁的方式实现多线程的同步处理。这里的<strong>对象</strong>包括<strong>类对象</strong>和<strong>实例对象</strong>两种。<br>一个类的<strong>静态成员域</strong>和<strong>静态成员方法</strong>隶属于类对象。一个类的<strong>非静态成员域</strong>和<strong>非静态成员方法</strong>是不隶属于类对象的，而隶属于类的<strong>实例对象</strong>。同样，一个类的静态成员域和静态成员方法不隶属于类的实例对象。创建类的实例对象可以通过<code>new</code>运算符和类的构造方法。</p><hr><h2 id="Java中的一个类怎么调用另一个类中的方法？"><a href="#Java中的一个类怎么调用另一个类中的方法？" class="headerlink" title="Java中的一个类怎么调用另一个类中的方法？"></a>Java中的一个类怎么调用另一个类中的方法？</h2><ul><li>方法1：新建一个类。然后在调用类中先进行被调用类实例化，然后通过实例化的对象访问。例如：</li></ul><pre><code>//先定义一个类import static java.lang.Systenm.out;public class Son{    public void IsSon(){        out.append(&quot;调用Son类中的IsSon成员方法成功&quot;)；    }}</code></pre><pre><code>//实例化，调用public calss Main(){    public static void main(String args[]){        Son son = new Son();        son.IsSon();    }}</code></pre><ul><li>方法2:新建一个类，将该类中需要被调用的方法设置为静态（static），加了static后，就可以用类名直接调用。然后在调用类中直接通过类名进行访问。调用格式为：类名.方法名（参数表）。</li></ul><pre><code>//先定义一个类import static java.lang.Systenm.out;public class Son{    public static void IsSon(){        out.append(&quot;调用Son类中的IsSon成员方法成功&quot;)；    }}</code></pre><pre><code>//实例化，调用public calss Main(){    public static void main(String args[]){        son.IsSon();    }}</code></pre><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>对象的构造主要通过类。类是实例对象的模板。</p><blockquote><p>[修饰词] class 类名 [extends 父类] [implemes 接口] {<br><br>类体<br><br>}</p></blockquote><p>&nbsp;&nbsp;<br>类体部分可以对定义类的<strong>构造方法</strong>和<strong>类的两类成员要素</strong>(成员域和成员方法)。</p><p>&nbsp;&nbsp;<br><strong>类的构造方法</strong>主要用创建类的实例对象，通常同时完成新创建的实例对象的初始化。</p><p>&nbsp;&nbsp;<br>构造方法有如下3个特点</p><blockquote><ol><li>构造方法名必须与类名相同<br> </li><li>构造方法不具有任何返回类型<br></li><li>任何一个类都含有构造方法</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esp8266安装</title>
      <link href="/2019/08/29/esp8266-an-zhuang/"/>
      <url>/2019/08/29/esp8266-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><blockquote><p>Hello World!</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络资源</title>
      <link href="/2019/08/29/zi-yuan/"/>
      <url>/2019/08/29/zi-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h1><blockquote><p>此页面主要分享一些搜集到的网络资源，不定时更新，侵权联系。</p></blockquote><hr><p><a href="https://pan.baidu.com/s/1OkV-Z1C1wYqKqmdFlpI9vA" target="_blank" rel="noopener">Java程序员面试宝典第4版</a> 提取码：hsl3 </p><p><a href="https://pan.baidu.com/s/1K1MvYuBprwSE72nixANkMw" target="_blank" rel="noopener">Java程序员面试笔试宝典</a> 提取码: 32k9 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客</title>
      <link href="/2019/08/29/wo-de-bo-ke/"/>
      <url>/2019/08/29/wo-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h1><hr><p>这是我的第一个个人博客网站，不定时更新，具体搭建过程可以<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">参考这里</a>。</p><p>感谢博主网站源代码开源，引用链接：<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">https://sunhwee.com/posts/6e8839eb.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
