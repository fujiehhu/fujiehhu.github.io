<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java</title>
      <link href="/2019/10/29/java/"/>
      <url>/2019/10/29/java/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#以下为一些方法">一些常用函数</a></li><li><a href="##面向对象">面向对象</a></li><li><a href="##类的封装、继承与多态">类的封装、继承与多态</a></li><li><a href="##抽象类与接口">抽象类与接口</a></li></ul><p><font size="4"> </font><br>Java特性：</p><p>简单 安全 可移植 面向对象 健壮 多线程 体系结构中立 解释执行 高性能 分布式 动态</p><hr><p>面向对象的三个原则：<br><font color="red">封装 继承 多态</font></p><hr><p>Java 与 Java EE 的关系</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/10/29/KRtz28.png" alt="Java 与 Java EE 的关系"></p><hr><p><strong>continue</strong> 与 <strong>break</strong></p><p>在while、for、do…while或switch等语句结构中</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">for</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>      语句 <span class="token number">1</span> <span class="token punctuation">;</span>      语句 <span class="token number">2</span> <span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token keyword">break</span> <span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      语句 n <span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ul><li><p>break 语句</p><ul><li>使程序立即<font color="red">退出</font>该结构,转而执行该结构下面的语句</li></ul></li><li><p>continue 语句</p><ul><li>结束<font color="red">本次</font>循环而立即测试循环的条件</li></ul></li></ul><hr><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li><p>对象</p><ul><li>对象的特征分为<font color="red">静态特征</font>和<font color="red">动态特征</font><ul><li><font color="red">静态特征</font>抽象为<font color="red">属性</font>， 用数据来描述，在java中称为<font color="red">变量</font></li><li><font color="red">动态特征</font>抽象为<font color="red">行为</font>， 用代码来表示，在java中称为<font color="red">方法</font></li></ul></li><li>一个对象由一组属性和一组对属性进行操作的方法构成</li><li>对象的比较<ul><li><strong>==</strong> 用于比较两个对象的<font color="red">内存地址值</font>是否相等</li><li><strong>equals()</strong> 用于比较两个对象的<font color="red">内容</font>是否一致</li></ul></li></ul></li><li><p>类</p><ul><li>用类的方式解决问题，必须用类创建一个<font color="red">实例化的类对象</font>，然后通过<font color="red">类对象</font>去访问类的成员变量，去调用类的成员方法来实现程序的功能</li><li><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//类的定义使用</span> <span class="token keyword">class</span> <span class="token class-name">colordefine</span><span class="token punctuation">{</span>    String color <span class="token operator">=</span> <span class="token string">"黑色"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">getMes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"定义类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       colordefine b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">colordefine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>       b<span class="token punctuation">.</span><span class="token function">getMes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li>java类属性和对象属性的初始化顺序如下<ul><li>类属性（静态变量）定义时初始化</li><li>static 块中的初始化代码</li><li>对象属性（非静态变量）定义时的初始化</li><li>构造方法（函数）中初始化代码</li></ul></li></ul></li><li><p>类方法</p><ul><li><p>类方法也称<font color="red">静态方法</font></p></li><li><p><font color="red">构造方法</font>所完成的主要工作是帮助新创建的对象赋初值</p><ul><li><font color="green">构造方法没有返回值</font></li><li><font color="green">与类名称相同</font></li><li>构造方法无需在程序中直接使用，而是在对象产生时自动执行</li></ul></li><li><p>构造方法和普通方法都可以<font color="red">重载</font></p></li><li><p>只要明确的声明了构造方法，那么默认的构造方法就不会自动生成</p><ul><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    Private <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>       name <span class="token operator">=</span> n<span class="token punctuation">;</span>       age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//------------------</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>       Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正确</span>       Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错 没有默认的构造方法</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ---------------------</span> <span class="token comment" spellcheck="true">//       修改后</span> <span class="token comment" spellcheck="true">//----------------------</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    Private <span class="token keyword">int</span> age<span class="token punctuation">;</span>    puclic <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>       name <span class="token operator">=</span> n<span class="token punctuation">;</span>       age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//-----------</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>       Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正确</span>       Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正确</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ul></li><li><p>单态模式</p></li><li><p>类中的属性或者方法被<strong>private</strong>修饰时，该类实例化的对象便不能调用</p><ul><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">aa</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       Person p <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Error:(9, 27) java: name 在 Person 中是 private 访问控制</span></code></pre></li></ul></li></ul></li></ul><h2 id="类的封装、继承与多态"><a href="#类的封装、继承与多态" class="headerlink" title="类的封装、继承与多态"></a>类的封装、继承与多态</h2><ul><li><p>类的封装</p></li><li><p>类的继承</p><ul><li>java中支持类的<font color="red">单继承</font>和<font color="red">多层</font>继承，但是不支持多继承</li><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/10/31/KoyNyF.png" alt="多重继承"></li><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s2.ax1x.com/2019/10/31/Koyfwd.png" alt="多层继承"></li><li><font color="red">子类对象在实例化时会默认<font color="green">先去调用父类中</font>的无参构造方法，之后<font color="green">再调用本类中</font>的相应构造方法</font></li><li><font color="green">super</font>关键字完成子类调用父类中的属性和方法，只能放在程序第一行<ul><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//父类构造方法</span>    <span class="token keyword">public</span> <span class="token function">Persong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    String school<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//子类的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span>String school<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//这里用super调用父类中的方法</span>       <span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>       <span class="token keyword">super</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//调用父类中的方法</span>       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//调用本类中shool属性</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>类的多态</p><ul><li>子类实例化对象可以转换为父类实例化对象  <font color="#8470FF">向上转型（自动完成）</font><ul><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    puvlic <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//错误</span>       Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>       Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向下转型</span>       <span class="token comment" spellcheck="true">//正确</span>       Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span>       Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向下转型</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ul></li><li><font color="#8470FF">向下转型必须进行强制类型转换</font></li></ul></li></ul><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><ul><li></li></ul><hr><h1 id="以下为一些方法"><a href="#以下为一些方法" class="headerlink" title="以下为一些方法"></a>以下为一些方法</h1><blockquote><p>Java 中的<strong>length</strong> <strong>length()</strong></p></blockquote><ul><li><p>length 是【属性】</p><ul><li>求数组的长度</li><li><pre class=" language-java"><code class="language-java">   String <span class="token punctuation">[</span><span class="token punctuation">]</span> myList<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"str1"</span><span class="token punctuation">,</span><span class="token string">"str2"</span><span class="token punctuation">,</span><span class="token string">"str3"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>length() 是【方法】</p><ul><li>求字符串的长度</li><li><pre class=" language-java"><code class="language-java">   String <span class="token punctuation">[</span><span class="token punctuation">]</span> myString<span class="token operator">=</span><span class="token string">"stringtest"</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><hr><blockquote><p>与数组操作有关的API方法</p></blockquote><ul><li><p>数组的拷贝 <font color="red">System.arraycopy(source,0,dest,0,x)</font></p><ul><li>复制源数组从下标0开始的x个元素到目标数组，从目标数组的下标0所对应的位置开始存取</li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> a2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>a2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//----------------------</span>a2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>数组的排序 <font color="red">Arrays.sort()</font></p><ul><li><pre class=" language-java"><code class="language-java">   <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>   <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//--------------------------</span>   a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些题目</title>
      <link href="/2019/10/25/yi-xie-ti-mu/"/>
      <url>/2019/10/25/yi-xie-ti-mu/</url>
      
        <content type="html"><![CDATA[<table><tr><td bgcolor="00FF7F">假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？注意：给定 n 是一个正整数。</td></tr></table><p><strong><center><font size="4" color="red">动态规划</font></center></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache<span class="token comment" spellcheck="true"># 动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    @lru_cache<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>climbStairs<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>climbStairs<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><hr><table><tr><td bgcolor="00FF7F">给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</td></tr></table><p><strong><center><font size="4" color="red">使用异或操作统计不同元素</font></center></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 异或</span>        res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> res <span class="token operator">^</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> res</code></pre><table><thead><tr><th align="center">符号</th><th align="center">描述</th><th align="center">运算规则</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">与</td><td align="center">两个位都为1时，结果才为1 <strong><em>统计奇数</em></strong></td></tr><tr><td align="center">|</td><td align="center">或</td><td align="center">两个位都为0时，结果才为0 <strong><em>统计偶数</em></strong></td></tr><tr><td align="center">^</td><td align="center">异或</td><td align="center">两个位相同为0，相异为1 <strong><em>常用统计不相同数</em></strong></td></tr></tbody></table><hr><table><tr><td bgcolor="00FF7F">给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</td></tr></table><p><strong><center><font size="4" color="red">如果nums[j]不等于val, 则将nums[j]赋值给nums[i]即可, i自增</font></center></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> i</code></pre><hr><table><tr><td bgcolor="00FF7F">给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。说明：本题中，我们将空字符串定义为有效的回文串。</td></tr></table><p><strong><center><font size="4" color="red">头尾双指针</font></center></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        j <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> j <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token operator">not</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">></span> j<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>                       <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>               <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keras</title>
      <link href="/2019/09/26/keras/"/>
      <url>/2019/09/26/keras/</url>
      
        <content type="html"><![CDATA[<p># </p><h1 id="keras-深度学习代码"><a href="#keras-深度学习代码" class="headerlink" title="keras 深度学习代码"></a>keras 深度学习代码</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> keras <span class="token keyword">import</span> optimizers<span class="token keyword">from</span> keras <span class="token keyword">import</span> applications<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential<span class="token punctuation">,</span> Model<span class="token keyword">from</span> keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> ModelCheckpoint<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dropout<span class="token punctuation">,</span> Flatten<span class="token punctuation">,</span> Dense<span class="token keyword">from</span> keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>image <span class="token keyword">import</span> ImageDataGenerator<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> ReduceLROnPlateau</code></pre><pre class=" language-python"><code class="language-python">base_dir <span class="token operator">=</span> <span class="token string">'  '</span>train_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">)</span>validation_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'validation'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">batch_size <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment" spellcheck="true"># 批量大小</span>epochs <span class="token operator">=</span> <span class="token number">40</span>  <span class="token comment" spellcheck="true"># 迭代次数</span>img_height<span class="token punctuation">,</span> img_width <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span>  <span class="token comment" spellcheck="true"># 图片高宽</span>train_data_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 训练集目录</span>validation_data_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'validation'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 测试集目录</span>OUT_CATEGORIES <span class="token operator">=</span> <span class="token number">8</span>  <span class="token comment" spellcheck="true"># 分类数</span>nb_train_samples <span class="token operator">=</span>    <span class="token comment" spellcheck="true"># 训练样本数</span>nb_validation_samples <span class="token operator">=</span>    <span class="token comment" spellcheck="true"># 验证样本数</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义模型</span>base_model <span class="token operator">=</span> applications<span class="token punctuation">.</span>VGG16<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token string">"imagenet"</span><span class="token punctuation">,</span> include_top<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span>img_width<span class="token punctuation">,</span> img_height<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 预训练的VGG19网络，替换掉顶部网络</span>top_model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 自定义顶层网络</span>top_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span>base_model<span class="token punctuation">.</span>output_shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将预训练网络展平</span>top_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 全连接层，</span>top_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Dropout概率0.5</span>top_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>OUT_CATEGORIES<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出层，二分类</span>model <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>base_model<span class="token punctuation">.</span>input<span class="token punctuation">,</span> outputs<span class="token operator">=</span>top_model<span class="token punctuation">(</span>base_model<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 新网络=预训练网络+自定义网络</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'sparse_categorical_crossentropy'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>optimizers<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 损失函数为二进制交叉熵，优化器为SGD</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#数据增强</span>train_datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>      zoom_range<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      rescale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span>      rotation_range<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">,</span>      shear_range<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>      horizontal_flip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>      vertical_flip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>      width_shift_range<span class="token operator">=</span><span class="token number">0.35</span><span class="token punctuation">,</span>      height_shift_range<span class="token operator">=</span><span class="token number">0.35</span><span class="token punctuation">,</span>      fill_mode <span class="token operator">=</span> <span class="token string">'constant'</span><span class="token punctuation">,</span>      cval <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>test_datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>  rescale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">255</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 测试数据预处理器</span>train_generator <span class="token operator">=</span> train_datagen<span class="token punctuation">.</span>flow_from_directory<span class="token punctuation">(</span>train_data_dir<span class="token punctuation">,</span> target_size<span class="token operator">=</span><span class="token punctuation">(</span>img_height<span class="token punctuation">,</span> img_width<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                    batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> class_mode<span class="token operator">=</span><span class="token string">'binary'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 训练数据生成器</span>validation_generator <span class="token operator">=</span> test_datagen<span class="token punctuation">.</span>flow_from_directory<span class="token punctuation">(</span>validation_data_dir<span class="token punctuation">,</span> target_size<span class="token operator">=</span><span class="token punctuation">(</span>img_height<span class="token punctuation">,</span> img_width<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                        batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> class_mode<span class="token operator">=</span><span class="token string">'binary'</span><span class="token punctuation">,</span>                                                        shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 验证数据生成器</span></code></pre><pre class=" language-python"><code class="language-python">filepath<span class="token operator">=</span><span class="token string">'/content/drive/My Drive/vgg/model/VGG19-{epoch:03d}-{val_loss:.4f}-{val_acc:.4f}.h5'</span>checkpointer <span class="token operator">=</span> ModelCheckpoint<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> monitor<span class="token operator">=</span><span class="token string">'val_acc'</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> save_best_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 保存最优模型</span><span class="token comment" spellcheck="true">#降低学习率1</span><span class="token keyword">import</span> keras<span class="token punctuation">.</span>backend <span class="token keyword">as</span> K<span class="token keyword">from</span> keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> LearningRateScheduler<span class="token keyword">def</span> <span class="token function">scheduler</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> epoch  <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        lr <span class="token operator">=</span> K<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>        K<span class="token punctuation">.</span>set_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">,</span> lr <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lr changed to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lr <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> epoch<span class="token operator">==</span><span class="token number">15</span><span class="token punctuation">:</span>        lr <span class="token operator">=</span> K<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>        K<span class="token punctuation">.</span>set_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">,</span> lr <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lr changed to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lr <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> epoch<span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">:</span>        lr <span class="token operator">=</span> K<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>        K<span class="token punctuation">.</span>set_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">,</span> lr <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lr changed to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lr <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> epoch<span class="token operator">==</span><span class="token number">28</span><span class="token punctuation">:</span>        lr <span class="token operator">=</span> K<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>        K<span class="token punctuation">.</span>set_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">,</span> lr <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lr changed to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lr <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> K<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>reduce_lr <span class="token operator">=</span> LearningRateScheduler<span class="token punctuation">(</span>scheduler<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_generator<span class="token punctuation">(</span>train_generator<span class="token punctuation">,</span>                               steps_per_epoch<span class="token operator">=</span>nb_train_samples <span class="token operator">//</span> batch_size<span class="token punctuation">,</span>                               epochs<span class="token operator">=</span>epochs<span class="token punctuation">,</span>                              validation_data<span class="token operator">=</span>validation_generator<span class="token punctuation">,</span>                               validation_steps<span class="token operator">=</span>nb_train_samples <span class="token operator">//</span> batch_size<span class="token punctuation">,</span>                              verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> workers<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>                               class_weight<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span>                              callbacks<span class="token operator">=</span><span class="token punctuation">[</span>checkpointer<span class="token punctuation">,</span>reduce_lr<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 每轮一行输出结果，最大进程12</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> keras </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python笔记</title>
      <link href="/2019/09/23/python/"/>
      <url>/2019/09/23/python/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#一些常用函数">一些常用函数</a></li></ul><h2 id><a href="#" class="headerlink" title></a><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://pxyr7adce.bkt.clouddn.com/Python%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5.jpg" alt="Python编程：从入门到实践"></h2><h1 id="变量和简单数字类型"><a href="#变量和简单数字类型" class="headerlink" title="变量和简单数字类型"></a><center>变量和简单数字类型</center></h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>单双引号都可</li></ul><blockquote><p>使用方法修改字符串的大小写</p></blockquote><ul><li><strong>title( )</strong> 以首字母大写的方式显示每个单词</li><li>将字符串改为全部大写或全部小写：<strong>upper( )</strong>，<strong>lower( )</strong></li></ul><blockquote><p>合并（拼接）字符串</p></blockquote><ul><li>使用加号（+）来合并字符串</li></ul><blockquote><p>使用制表符或换行符来添加空白</p></blockquote><ul><li>制表符 \t <br> 换行符 \n <br> </li></ul><blockquote><p>删除空白</p></blockquote><ul><li>删除字符串开头的空白 <strong>lstrip( )</strong> <br><br>删除字符串末尾的空白 <strong>rstrip( )</strong>  <br><br>同时删除字符串两端的空白 <strong>strip( )</strong></li></ul><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><ul><li>使用两个乘号表示乘方运算 3**2 = 9</li><li>将非字符串值表示为字符串 <strong>str( )</strong></li></ul><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a><center>列表</center></h1><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><ul><li>列表是有序集合<pre class=" language-python"><code class="language-python">  bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'trek'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>bicycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li>索引从0 而不是1 开始</li><li>将索引指定为-1，可让返回最后一个列表元素</li></ul><h2 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h2><pre class=" language-python"><code class="language-python">motorcycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'yamaha'</span><span class="token punctuation">,</span> <span class="token string">'suzuki'</span><span class="token punctuation">]</span></code></pre><blockquote><p> 修改</p></blockquote><blockquote><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3></blockquote><ol><li>末尾添加：<strong>append( )</strong><pre class=" language-python"><code class="language-python"> motorcycles<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'ducati'</span><span class="token punctuation">)</span></code></pre></li><li>在列表中插入元素：<strong>insert( )</strong> <pre class=" language-python"><code class="language-python"> motorcycles<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'ducati'</span><span class="token punctuation">)</span></code></pre></li></ol><blockquote><h3 id="从列表中删除元素"><a href="#从列表中删除元素" class="headerlink" title="从列表中删除元素"></a>从列表中删除元素</h3></blockquote><ul><li><p>使用<strong>del</strong>语句删除元素</p><pre class=" language-python"><code class="language-python">  <span class="token keyword">del</span> motorcycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">del</span> motorcycles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  </code></pre></li><li><p>使用方法 <strong>pop( )</strong> 删除元素(可删除列表末尾的元素)</p><pre class=" language-python"><code class="language-python">  popped_motorcycle <span class="token operator">=</span> motorcycles<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>popped_motorcycle<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'yamaha'</span><span class="token punctuation">,</span> <span class="token string">'suzuki'</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'yamaha'</span><span class="token punctuation">]</span>  suzuki</code></pre></li><li><p>弹出列表中任何位置处的元素</p><pre class=" language-python"><code class="language-python">  pop<span class="token punctuation">(</span>索引<span class="token punctuation">)</span></code></pre></li><li><p>根据值删除元素 <strong>remove( )</strong></p><pre class=" language-python"><code class="language-python">  motorcycles<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'ducati'</span><span class="token punctuation">)</span></code></pre><blockquote><p>方法remove( )只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</p></blockquote></li></ul><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><ul><li><p>使用方法<strong>sort( )</strong>对列表进行<strong>永久</strong>性排序</p><ul><li>与字母顺序相反的顺序排列列表元素 <strong>sort(reverse=True)</strong></li></ul></li><li><p>使用函数<strong>sorted( )</strong>对列表进行<strong>临时</strong>排序</p><ul><li>与字母顺序相反的顺序排列列表元素 <strong>sorted(reverse=True)</strong></li></ul></li><li><p>反转<strong>列表元素</strong>的排列顺序 <strong>reverse( )</strong></p></li><li><p>确定列表的长度 <strong>len( )</strong></p></li><li><p>取得某个值的索引<strong>index(target)</strong></p></li></ul><hr><h1 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a><center>操作列表</center></h1><h2 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h2><blockquote><p><strong>range( )</strong> </p></blockquote><pre class=" language-python"><code class="language-python">range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#指定步长</span></code></pre><ul><li>函数<strong>range( )</strong>让Python从你指定的第一个值开始数，在到达你指定的第二个索引<strong>前面</strong>的元素后停止<pre class=" language-python"><code class="language-python"> <span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#-----------------------    </span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span></code></pre></li></ul><blockquote><p>使用函数<strong>list( )</strong> 将<strong>range( )</strong> 的结果直接转换为列表</p></blockquote><blockquote><p>对数字列表执行简单的统计计算</p></blockquote><pre class=" language-python"><code class="language-python">min<span class="token punctuation">(</span><span class="token punctuation">)</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>列表解析</p></blockquote><pre class=" language-python"><code class="language-python">squares <span class="token operator">=</span> <span class="token punctuation">[</span>value<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#------------------</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span></code></pre><h2 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h2><blockquote><p>切片</p></blockquote><pre class=" language-python"><code class="language-python">players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'charles'</span><span class="token punctuation">,</span> <span class="token string">'martina'</span><span class="token punctuation">,</span> <span class="token string">'michael'</span><span class="token punctuation">,</span> <span class="token string">'florence'</span><span class="token punctuation">,</span> <span class="token string">'eli'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>遍历切片</p></blockquote><pre class=" language-python"><code class="language-python">players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'charles'</span><span class="token punctuation">,</span> <span class="token string">'martina'</span><span class="token punctuation">,</span> <span class="token string">'michael'</span><span class="token punctuation">,</span> <span class="token string">'florence'</span><span class="token punctuation">,</span> <span class="token string">'eli'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Here are the first three players on my team:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> player <span class="token keyword">in</span> players<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>复制列表</p></blockquote><ul><li>要复制列表，可创建一个包含整个列表的切片<pre class=" language-python"><code class="language-python">  my_foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pizza'</span><span class="token punctuation">,</span> <span class="token string">'falafel'</span><span class="token punctuation">,</span> <span class="token string">'carrot cake'</span><span class="token punctuation">]</span>  friend_foods <span class="token operator">=</span> my_foods<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code></pre></li><li>倘若只是简单地将my_foods赋给friend_foods，就不能得到两个列表<pre class=" language-python"><code class="language-python">  my_foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pizza'</span><span class="token punctuation">,</span> <span class="token string">'falafel'</span><span class="token punctuation">,</span> <span class="token string">'carrot cake'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#这行不通</span>  friend_foods <span class="token operator">=</span> my_foods</code></pre><blockquote><p>这里将my_foods赋给friend_foods，而不是将my_foods的副本存储到friend_foods。这种语法实际上是让Python将新变量friend_foods关联到包含在my_foods中的列表，因此这两个变量都指向同一个列表</p></blockquote></li></ul><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>Python将<strong>不能修改</strong>的值称为不可变的，而不可变的列表被称为<strong>元组</strong>。</p><h2 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h2><ul><li>使用圆括号而不是方括号</li></ul><h2 id="遍历元组中的所有值-for循环"><a href="#遍历元组中的所有值-for循环" class="headerlink" title="遍历元组中的所有值 for循环"></a>遍历元组中的所有值 <strong>for循环</strong></h2><h2 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h2><ul><li>虽然不能修改元组的元素，但可以给存储元组的变量赋值<pre class=" language-python"><code class="language-python">  dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>  dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></code></pre></li></ul><hr><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><center>if语句</center></h1><hr><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a><center>字典</center></h1><h2 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h2><ul><li>字典是一系列<strong>键—值</strong>对,每个<strong>键</strong>都与一个值相关联，你可以使用键来访问与之<br>相关联的值。与键相关联的<strong>值</strong>可以是数字、字符串、列表乃至字典。<pre class=" language-python"><code class="language-python">  alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h3><ul><li>要获取与键相关联的值，可依次指定字典名和放在方括号内的键<pre class=" language-python"><code class="language-python">  alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">}</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>alien_0<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="添加键–值对"><a href="#添加键–值对" class="headerlink" title="添加键–值对"></a>添加键–值对</h3><ul><li>字典是一种动态结构，可随时在其中添加键—值对。要添加键—值对，可依次指定字典名、用<br>方括号括起的键和相关联的值。<pre class=" language-python"><code class="language-python">  alien_0<span class="token punctuation">[</span><span class="token string">'x_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  alien_0<span class="token punctuation">[</span><span class="token string">'y_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#----------------------</span>  <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'y_position'</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'x_position'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre></li><li>Python不关心键—值对的添加顺序，而只关心键和值之间的关联关系。</li></ul><h3 id="创建一个空字典"><a href="#创建一个空字典" class="headerlink" title="创建一个空字典"></a>创建一个空字典</h3><ul><li>使用一对空的花括号定义一个字典</li></ul><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><ul><li>要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值<pre class=" language-python"><code class="language-python">  alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">}</span>  alien_0<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'yellow'</span></code></pre></li></ul><h3 id="删除键–值对"><a href="#删除键–值对" class="headerlink" title="删除键–值对"></a>删除键–值对</h3><ul><li>使用del语句将相应的键—值对彻底删除,使用del语句时，必须指定字典名和要删除的键。<pre class=" language-python"><code class="language-python">  alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>  <span class="token keyword">del</span> alien_0<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span></code></pre></li></ul><h3 id="由类似对象组成的字典"><a href="#由类似对象组成的字典" class="headerlink" title="由类似对象组成的字典"></a>由类似对象组成的字典</h3><ul><li>你也可以使用字典来存储众多对象的同一种信息<pre class=" language-python"><code class="language-python">  favorite_languages <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>      <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>      <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span></code></pre></li></ul><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><h3 id="遍历所有的键—值对"><a href="#遍历所有的键—值对" class="headerlink" title="遍历所有的键—值对"></a>遍历所有的键—值对</h3><ul><li>方法<strong>items( )</strong>,它返回一个键—值对列表<pre class=" language-python"><code class="language-python">  user_0 <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'efermi'</span><span class="token punctuation">,</span>      <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'enrico'</span><span class="token punctuation">,</span>      <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'fermi'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>  <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_0<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nKey: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Value: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span></code></pre></li></ul><h3 id="遍历字典中的所有键"><a href="#遍历字典中的所有键" class="headerlink" title="遍历字典中的所有键"></a>遍历字典中的所有键</h3><ul><li>方法<strong>keys( )</strong>,返回一个键列表<pre class=" language-python"><code class="language-python">  favorite_languages <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>      <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>      <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>  <span class="token keyword">for</span> name <span class="token keyword">in</span> favorite_languages<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li>方法<strong>keys( )</strong>并非只能用于遍历；实际上，它返回一个列表，其中包含字典中的所有键    </li></ul><h3 id="按顺序遍历字典中的所有键"><a href="#按顺序遍历字典中的所有键" class="headerlink" title="按顺序遍历字典中的所有键"></a>按顺序遍历字典中的所有键</h3><ul><li><p>使用函数sorted()来获得按特定顺序排列的键列表的副本</p><pre class=" language-python"><code class="language-python">  <span class="token keyword">for</span> name <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>favorite_languages<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", thank you for taking the poll."</span><span class="token punctuation">)</span></code></pre><h3 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h3></li><li><p>方法<strong>values( )</strong>,返回一个值列表</p></li><li><p>最终的列表可能包含大量的重复项。为剔除重复项，可使用集合<strong>set</strong>。集合类似于列表，但每个元素都必须是独一无二的</p><pre class=" language-python"><code class="language-python">  favorite_languages <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>      <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>      <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>  <span class="token keyword">for</span> language <span class="token keyword">in</span> set<span class="token punctuation">(</span>favorite_languages<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>language<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>通过对包含重复元素的列表调用<strong>set()</strong>,可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合</p></blockquote></li></ul><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><h3 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h3><pre class=" language-python"><code class="language-python">alien_0 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>alien_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span>alien_2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span>aliens <span class="token operator">=</span> <span class="token punctuation">[</span>alien_0<span class="token punctuation">,</span> alien_1<span class="token punctuation">,</span> alien_2<span class="token punctuation">]</span><span class="token keyword">for</span> alien <span class="token keyword">in</span> aliens<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>alien<span class="token punctuation">)</span></code></pre><h3 id="在字典中存储列表"><a href="#在字典中存储列表" class="headerlink" title="在字典中存储列表"></a>在字典中存储列表</h3><ul><li>当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 存储所点比萨的信息</span>pizza <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'crust'</span><span class="token punctuation">:</span> <span class="token string">'thick'</span><span class="token punctuation">,</span>  <span class="token string">'toppings'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="在字典中存储字典"><a href="#在字典中存储字典" class="headerlink" title="在字典中存储字典"></a>在字典中存储字典</h3><pre class=" language-python"><code class="language-python">users <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'aeinstein'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'albert'</span><span class="token punctuation">,</span>        <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'einstein'</span><span class="token punctuation">,</span>        <span class="token string">'location'</span><span class="token punctuation">:</span> <span class="token string">'princeton'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'mcurie'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'marie'</span><span class="token punctuation">,</span>        <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'curie'</span><span class="token punctuation">,</span>        <span class="token string">'location'</span><span class="token punctuation">:</span> <span class="token string">'paris'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><hr><h1 id="用户输入和while循环"><a href="#用户输入和while循环" class="headerlink" title="用户输入和while循环"></a><center>用户输入和while循环</center></h1><h2 id="函数input"><a href="#函数input" class="headerlink" title="函数input( )"></a>函数<strong>input( )</strong></h2><ul><li>python将用户输入解读为字符串</li><li>函数<strong>input( )</strong> 接受一个参数：向用户显示的提示或说明(显示-&gt;输入)<pre class=" language-python"><code class="language-python">  name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"please enter your name: "</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"hello,"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span></code></pre></li><li><pre class=" language-python"><code class="language-python">prompt <span class="token operator">=</span> <span class="token string">"If you tell us who you are, we can personalize the messages you see."</span>prompt <span class="token operator">+=</span> <span class="token string">"\nWhat is your first name? "</span></code></pre><blockquote><p>运算符 += 在存储在prompt中的字符串末尾附加一个字符串</p></blockquote></li></ul><h3 id="使用int-获取数值输入"><a href="#使用int-获取数值输入" class="headerlink" title="使用int( ) 获取数值输入"></a>使用<strong>int( )</strong> 获取数值输入</h3><ul><li><pre class=" language-python"><code class="language-python">height <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"How tall are you, in inches? "</span><span class="token punctuation">)</span>height <span class="token operator">=</span> int<span class="token punctuation">(</span>height<span class="token punctuation">)</span></code></pre></li></ul><blockquote><p>求模运算符 %</p></blockquote><h2 id="使用while循环处理列表"><a href="#使用while循环处理列表" class="headerlink" title="使用while循环处理列表"></a>使用while循环处理列表</h2><blockquote><p>列表之间移动元素</p></blockquote><ul><li><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 首先，创建一个待验证用户列表</span>  <span class="token comment" spellcheck="true"># 和一个用于存储已验证用户的空列表</span>  unconfirmed_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alice'</span><span class="token punctuation">,</span> <span class="token string">'brian'</span><span class="token punctuation">,</span> <span class="token string">'candace'</span><span class="token punctuation">]</span>  confirmed_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 验证每个用户，直到没有未验证用户为止</span>  <span class="token comment" spellcheck="true"># 将每个经过验证的列表都移到已验证用户列表中</span>  <span class="token keyword">while</span> unconfirmed_users<span class="token punctuation">:</span>      current_user <span class="token operator">=</span> unconfirmed_users<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Verifying user: "</span> <span class="token operator">+</span> current_user<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      confirmed_users<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_user<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 显示所有已验证的用户</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nThe following users have been confirmed:"</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> confirmed_user <span class="token keyword">in</span> confirmed_users<span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>confirmed_user<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><blockquote><p>删除包含特定值的所有列表元素</p></blockquote><ul><li><pre class=" language-python"><code class="language-python">  pets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'goldfish'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'rabbit'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">]</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>pets<span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token string">'cat'</span> <span class="token keyword">in</span> pets<span class="token punctuation">:</span>      pets<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-----------------------</span>  <span class="token punctuation">[</span><span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'goldfish'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'rabbit'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'goldfish'</span><span class="token punctuation">,</span> <span class="token string">'rabbit'</span><span class="token punctuation">]</span></code></pre></li></ul><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a><center>函数</center></h1><h2 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h2><blockquote><p>位置实参 <strong>位置实参的顺序很重要</strong></p></blockquote><ul><li><pre class=" language-python"><code class="language-python">  <span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""显示宠物的信息"""</span>  describe_pet<span class="token punctuation">(</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> <span class="token string">'harry'</span><span class="token punctuation">)</span></code></pre></li></ul><blockquote><p>关键字实参 <strong>关键字实参的顺序无关紧要</strong></p></blockquote><ul><li><pre class=" language-python"><code class="language-python">  <span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""显示宠物的信息"""</span>  describe_pet<span class="token punctuation">(</span>animal_type<span class="token operator">=</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> pet_name<span class="token operator">=</span><span class="token string">'harry'</span><span class="token punctuation">)</span></code></pre></li></ul><blockquote><p>默认值 <strong>在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参</strong></p></blockquote><ul><li><p>给形参指定默认值时，等号两边不要有空格</p></li><li><pre class=" language-python"><code class="language-python">  <span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>pet_name<span class="token punctuation">,</span> animal_type<span class="token operator">=</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""显示宠物的信息"""</span>  describe_pet<span class="token punctuation">(</span>pet_name<span class="token operator">=</span><span class="token string">'willie'</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="在函数中修改列表"><a href="#在函数中修改列表" class="headerlink" title="在函数中修改列表"></a>在函数中修改列表</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_models</span><span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">,</span> completed_models<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    模拟打印每个设计，直到没有未打印的设计为止    打印每个设计后，都将其移到列表completed_models中    """</span><span class="token keyword">def</span> <span class="token function">show_completed_models</span><span class="token punctuation">(</span>completed_models<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""显示打印好的所有模型"""</span>unprinted_designs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'iphone case'</span><span class="token punctuation">,</span> <span class="token string">'robot pendant'</span><span class="token punctuation">,</span> <span class="token string">'dodecahedron'</span><span class="token punctuation">]</span>completed_models <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>print_models<span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">,</span> completed_models<span class="token punctuation">)</span>show_completed_models<span class="token punctuation">(</span>completed_models<span class="token punctuation">)</span>    </code></pre><h2 id="禁止函数修改列表"><a href="#禁止函数修改列表" class="headerlink" title="禁止函数修改列表"></a>禁止函数修改列表</h2><p>向函数传递列表的<strong>副本</strong>而不是原件；这样函数所做的任何修改都只影响副本，而丝毫不影响原件</p><pre class=" language-python"><code class="language-python">print_models<span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> completed_models<span class="token punctuation">)</span></code></pre><blockquote><p>虽然向函数传递列表的副本可保留原始列表的内容，但除非有充分的理由需要传递副本，否<br>则还是应该将原始列表传递给函数，因为让函数使用现成列表可避免花时间和内存创建副本，从<br>而提高效率，在处理大型列表时尤其如此。</p></blockquote><h2 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span><span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""打印顾客点的所有配料"""</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>toppings<span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token string">'pepperoni'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><blockquote><p>形参名<em>toppings中的*</em>星号<strong>让Python创建一个名为toppings的</strong>空元组<strong>，并将收到的所有值都封装到这个</strong>元组**中</p></blockquote><blockquote><p>结合使用位置实参和任意数量实参</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""概述要制作的比萨"""</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'pepperoni'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><blockquote><p>使用任意数量的关键字实参</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_profile</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> <span class="token operator">**</span>user_info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个字典，其中包含我们知道的有关用户的一切"""</span>    profile <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    profile<span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> first    profile<span class="token punctuation">[</span><span class="token string">'last_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> last    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        profile<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> profileuser_profile <span class="token operator">=</span> build_profile<span class="token punctuation">(</span><span class="token string">'albert'</span><span class="token punctuation">,</span> <span class="token string">'einstein'</span><span class="token punctuation">,</span>                                location<span class="token operator">=</span><span class="token string">'princeton'</span><span class="token punctuation">,</span>                                field<span class="token operator">=</span><span class="token string">'physics'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>user_profile<span class="token punctuation">)</span>   </code></pre><blockquote><p>形参*<em>user_info中的*</em>两个星号<strong>让Python创建一个名为user_info的</strong>空字典<strong>，并将收到的所有名称—值对都封装到这个</strong>字典**中</p></blockquote><h2 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h2><blockquote><p>导入整个模块</p></blockquote><ul><li><p>如果使用import语句导入了整个模块，使用下面的语法来使用其中任何一个函数：</p><blockquote><p>module_name.function_name()</p></blockquote></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pizza.py</span><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""概述要制作的比萨"""</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pizzapizza<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'pepperoni'</span><span class="token punctuation">)</span>pizza<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><blockquote><p>导入特定的函数</p></blockquote><ul><li><blockquote><p>from module_name import function_0, function_1, function_2</p></blockquote></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pizza <span class="token keyword">import</span> make_pizzamake_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'pepperoni'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><blockquote><p>使用as 给函数指定别名</p></blockquote><ul><li>如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名 </li></ul><blockquote><p>导入模块中的所有函数</p></blockquote><ul><li>使用星号（*）运算符可让Python导入模块中的所有函数</li></ul><h3 id="如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开"><a href="#如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开" class="headerlink" title="如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开"></a>如果程序或模块包含多个函数，可使用<strong>两个空行</strong>将相邻的函数分开</h3><hr><h1 id="类"><a href="#类" class="headerlink" title="类"></a><center>类</center></h1><h2 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h2><p><strong>三种方式</strong></p><ul><li>直接通过实例进行修改</li><li>通过方法进行设置</li><li>通过方法进行递增（增加特定的值）<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""初始化描述汽车的属性"""</span>      self<span class="token punctuation">.</span>make <span class="token operator">=</span> make      self<span class="token punctuation">.</span>model <span class="token operator">=</span> model      self<span class="token punctuation">.</span>year <span class="token operator">=</span> year      self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>   <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""打印一条指出汽车里程的消息"""</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -----------------------       </span>my_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>my_new_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><blockquote><ol><li>直接修改属性的值</li></ol></blockquote><pre class=" language-python"><code class="language-python">my_new_car<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">23</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><ol start="2"><li>通过方法修改属性的值</li></ol></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>    <span class="token keyword">def</span> <span class="token function">update_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mileage<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        将里程表读数设置为指定的值        禁止将里程表读数往回调        """</span>        <span class="token keyword">if</span> mileage <span class="token operator">>=</span> self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> mileage        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't roll back an odometer!"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#------------------------------------------</span>my_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>my_new_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>update_odometer<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span>        </code></pre><blockquote><ol start="3"><li>通过方法对属性的值进行递增</li></ol></blockquote><pre class=" language-python"><code class="language-python"></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""一次模拟汽车的简单尝试"""</span>    <span class="token comment" spellcheck="true">#----------------------</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""电动汽车的独特之处"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化父类的属性"""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#----------------------</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span> <span class="token string">'model s'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>my_tesla<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>创建子类时，父类必须包含在当前文件中，且位于子类前面</li><li>定义子类时，必须在括号内指定父类的名称</li></ul><blockquote><ol><li>给子类定义属性和方法</li></ol></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""一次模拟汽车的简单尝试"""</span>    <span class="token comment" spellcheck="true">#----------------------</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""电动汽车的独特之处"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化父类的属性"""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> <span class="token number">70</span>    <span class="token keyword">def</span> <span class="token function">describe_battery</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""打印一条描述电瓶容量的消息"""</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"This car has a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>battery_size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-kWh battery."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#----------------------</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span> <span class="token string">'model s'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>my_tesla<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><ol start="2"><li>重写父类的方法</li></ol></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>    <span class="token keyword">def</span> <span class="token function">fill_gas_tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""电动汽车没有油箱"""</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"This car doesn't need a gas tank!"</span><span class="token punctuation">)</span></code></pre><blockquote><ol start="3"><li>将实例用作属性</li></ol></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">Battery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""一次模拟电动汽车电瓶的简单尝试"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> battery_size<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化电瓶的属性"""</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> battery_size    <span class="token keyword">def</span> <span class="token function">describe_battery</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""打印一条描述电瓶容量的消息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>battery_size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-kWh battery."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化父类的属性"""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery <span class="token operator">=</span> Battery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#----------------------</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span> <span class="token string">'model s'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>my_tesla<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>battery<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在实例my_tesla中查找属性battery，并对存储在该属性中的Battery实例调用方法describe_battery()</p><h2 id="类编码风格"><a href="#类编码风格" class="headerlink" title="类编码风格"></a>类编码风格</h2><p><strong>类名</strong>应采用<strong>驼峰命名法</strong>，即将类名中的<strong>每个单词的首字母</strong>都大写，而不使用下划线。<strong>实例名和模块名</strong>都采用<strong>小写</strong>格式，并在单词之间加上下划线</p><hr><h1 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a><center>文件和异常</center></h1><h2 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h2><h3 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h3><pre class=" language-python"><code class="language-python">pi_digits<span class="token punctuation">.</span>txt<span class="token number">3.1415926535</span>   <span class="token number">8979323846</span>   <span class="token number">2643383279</span><span class="token comment" spellcheck="true">#--------------</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'pi_digits.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    contents <span class="token operator">=</span> file_object<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>contents<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>read()到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行</p><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><pre><code>python_work--    |    |--sfile_reader.py    |--text_files        |--pi_digits.txt</code></pre><p><strong>相对文件路径</strong>：相对于当前运行的程序所在目录的</p><p><strong>绝对文件路径</strong>：文件在计算机中的准确位置</p><ul><li><p><strong>Linux</strong><br></p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'text_files/filename.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span></code></pre></li><li><p><strong>Windows</strong><br></p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'text_files\filename.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span></code></pre></li></ul><p>Windows系统中，在文件路径中使用反斜杠（\）而不是斜杠（/）</p><h3 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h3><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'pi_digits.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> file_object<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h2><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'pi_digits.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    lines <span class="token operator">=</span> file_object<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>方法readlines()从文件中读取每一行，并将其存储在一个列表中</p><h3 id="使用文件的内容"><a href="#使用文件的内容" class="headerlink" title="使用文件的内容"></a>使用文件的内容</h3><p>读取文本文件时，Python将其中的所有文本都解读为<strong>字符串</strong>。</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><h3 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h3><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'programming.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love programming."</span><span class="token punctuation">)</span></code></pre><p>打开文件时，可指定</p><ul><li>读取模式(‘r’）</li><li>写入模式(‘w’)</li><li>附加模式(‘a’)</li><li>读取和写入文件的模式(‘r+’)</li></ul><p>如果要写入的文件不存在，函数open()将自动创建它</p><p>以写入（’w’）模式打开文件时千万要小心，因为如果指定的文件已经存在，Python将在返回文件对象前清空该文件。</p><p>Python只能将字符串写入文本文件</p><h3 id="写入多行"><a href="#写入多行" class="headerlink" title="写入多行"></a>写入多行</h3><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'programming.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love programming.\n"</span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love creating new games.\n"</span><span class="token punctuation">)</span></code></pre><h3 id="附加到文件"><a href="#附加到文件" class="headerlink" title="附加到文件"></a>附加到文件</h3><p>以附加模式打开文件时，Python不会在返回文件对象前清空文件，而写入到文件的行都将添加到文件末尾</p><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'programming.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I also love finding meaning in large datasets.\n"</span><span class="token punctuation">)</span>    file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love creating apps that can run in a browser.\n"</span><span class="token punctuation">)</span></code></pre><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="分析文本"><a href="#分析文本" class="headerlink" title="分析文本"></a>分析文本</h3><p>方法<strong>split()</strong>以空格为分隔符将字符串分拆成多个部分，并将这些部分都存储到一个列表中。</p><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p><strong>json.dump()</strong>和<strong>json.load()</strong></p><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a><center>测试代码</center></h1><h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2><h3 id="单元测试和测试用例"><a href="#单元测试和测试用例" class="headerlink" title="单元测试和测试用例"></a>单元测试和测试用例</h3><p><strong>单元测试</strong>用于核实函数的某个方面没有问题</p><p><strong>测试用例</strong>是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求</p><p>方法名必须以<strong>test_</strong>打头，这样它才会在运行test_name_function.py时自动运行</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">from</span> name_function <span class="token keyword">import</span> get_formatted_name<span class="token keyword">class</span> <span class="token class-name">NamesTestCase</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""测试name_function.py """</span>    <span class="token keyword">def</span> <span class="token function">test_first_last_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""能够正确地处理像Janis Joplin这样的姓名吗？"""</span>    formatted_name <span class="token operator">=</span> get_formatted_name<span class="token punctuation">(</span><span class="token string">'janis'</span><span class="token punctuation">,</span> <span class="token string">'joplin'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>formatted_name<span class="token punctuation">,</span> <span class="token string">'Janis Joplin'</span><span class="token punctuation">)</span></code></pre><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><hr><center><table><td bgcolor="PaleGreen"> 一些常用函数</td></table></center><h1 id="一些常用函数"><a href="#一些常用函数" class="headerlink" title="一些常用函数"></a>一些常用函数</h1><ol><li><font color="red">Python判断字符串是否为字母或者数字</font><ul><li>字符串.<font color="#6495ED">isalnum()</font>  所有字符都是数字或者字母，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">isalpha()</font>   所有字符都是字母，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">isdigit()</font>   所有字符都是数字，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">islower()</font>   所有字符都是小写，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">isupper()</font>   所有字符都是大写，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">istitle()</font>   所有单词都是首字母大写，为真返回 Ture，否则返回 False。</li><li>字符串.<font color="#6495ED">isspace()</font>   所有字符都是空白字符，为真返回 Ture，否则返回 False。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他</title>
      <link href="/2019/09/16/qi-ta/"/>
      <url>/2019/09/16/qi-ta/</url>
      
        <content type="html"><![CDATA[<center><div id="weather-view-he"></div><script>WIDGET = {ID: 'ggduimj82w'};</script><script type="text/javascript" src="https://apip.weatherdt.com/view/static/js/r.js?v=1111"></script></center>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图片标注工具LabelImg</title>
      <link href="/2019/09/16/tu-pian-biao-zhu-gong-ju-labelimg/"/>
      <url>/2019/09/16/tu-pian-biao-zhu-gong-ju-labelimg/</url>
      
        <content type="html"><![CDATA[<h1 id="图片标注工具LabelImg的安装及使用方法"><a href="#图片标注工具LabelImg的安装及使用方法" class="headerlink" title="图片标注工具LabelImg的安装及使用方法"></a>图片标注工具LabelImg的安装及使用方法</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>百度云<a href="https://pan.baidu.com/s/15vy4367JYusVNNX-13RJzA" target="_blank" rel="noopener">地址</a> 提取码: ivdc </p><h2 id="anaconda-prompt命令行安装"><a href="#anaconda-prompt命令行安装" class="headerlink" title="anaconda prompt命令行安装"></a>anaconda prompt命令行安装</h2><pre><code>pip3 install labelImg</code></pre><p>打开,命令行输入</p><pre><code>labelimg</code></pre><hr><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li>修改默认的XML文件保存位置，使用快捷键“Ctrl+R”，改为自定义位置，这里的路径一定不能包含中文，否则无法保存</li><li>快捷键：<br>画框 w ;<br>保存 ctrl+s；<br>下一张图片 d；<br>上一张图片 a；<br>复制当前标签和矩形框 ctrl+d ；<br>标记当前图片已标记 Space</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> labelImg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌colab</title>
      <link href="/2019/09/04/gu-ge-colab/"/>
      <url>/2019/09/04/gu-ge-colab/</url>
      
        <content type="html"><![CDATA[<h1 id="Google-Colab简介"><a href="#Google-Colab简介" class="headerlink" title="Google Colab简介"></a>Google Colab简介</h1><p>Google Colaboratory是谷歌开放的一款研究工具，主要用于机器学习的开发和研究。这款工具现在可以免费使用，但是不是永久免费暂时还不确定。Google Colab最大的好处是给广大的AI开发者提供了免费的GPU使用！GPU型号是Tesla K80！你可以在上面轻松地跑例如：Keras、Tensorflow、Pytorch等框架。</p><h2 id="挂载云盘"><a href="#挂载云盘" class="headerlink" title="挂载云盘"></a>挂载云盘</h2><blockquote><p>from google.colab import drive<br><br>drive.mount(‘/content/drive/‘)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 谷歌colab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java笔记</title>
      <link href="/2019/08/30/java-bi-ji/"/>
      <url>/2019/08/30/java-bi-ji/</url>
      
        <content type="html"><![CDATA[<div id="weather-view-he"></div><script>WIDGET = {ID: 'ggduimj82w'};</script><script type="text/javascript" src="https://apip.weatherdt.com/view/static/js/r.js?v=1111"></script># Java基础知识(笔记)**java 基本数据类型**<table><thead><tr><th align="center">类型</th><th align="center">位数</th><th align="center">类型</th><th align="center">位数</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">8</td><td align="center">int</td><td align="center">32</td></tr><tr><td align="center">char</td><td align="center">16</td><td align="center">long</td><td align="center">64</td></tr><tr><td align="center">byte</td><td align="center">8</td><td align="center">float</td><td align="center">32</td></tr><tr><td align="center">short</td><td align="center">16</td><td align="center">double</td><td align="center">64</td></tr></tbody></table><p><strong>类修饰词</strong></p><p>public：定义的类可以被java的所有软件包使用</p><p>abstract：抽象类</p><p>final：定义的列不能用作父类</p><p>在同一个java源文件中可以包含多个类，但不能包含两个或者两个以上的具有public修饰词的类。</p><p>面向对象的技术的3大特性：<strong>继承性</strong>，<strong>封装性</strong>，<strong>多态性</strong>。</p><p><strong>静态多态性</strong>指的是在同一个类中通脉那个方法在功能上的重载。</p><p><strong>动态多态性</strong>指的是在子类和父类的类体重均定义了具有基本相同声明的费静态成员方法。</p><hr><p>数组元素的下标值从0开始。</p><h1 id="数组，字符串，向量与哈希表"><a href="#数组，字符串，向量与哈希表" class="headerlink" title="数组，字符串，向量与哈希表"></a>数组，字符串，向量与哈希表</h1><blockquote><p>Vector&lt;向量元素的数据类型&gt; 变量名</p></blockquote><p><strong>引用数据类型</strong>：类(calss)，接口(interface)，枚举(enum)，数组(array)。</p><p><strong>基本数据类型</strong>：布尔，字符，字节，短整数，整数，长整数，单精度浮点数，双精度浮点数。</p><p><strong>向量</strong>：Vector&lt;数据类型&gt; 变量名；数据类型必须是引用数据类型。</p><hr><ul><li><strong>静态代码块</strong>：随着类的加载而执行，而且只执行一次。静态代码块的执行顺序优先于main函数。</li></ul><p>转<a href="https://blog.csdn.net/sinat_33921105/article/details/79509638" target="_blank" rel="noopener">静态代码块—学会这个就够了</a></p><ul><li><p>运行java应用程序时，实际的代码运行之前的一个步骤是加载类，如果类中有静态成员，加载类时会在heap中为其分配空间，此空间是属于类的。类中的非静态成员（实例成员）是和类的对象绑定的，它们属于对象在heap中的空间。静态成员不能访问非静态成员，因为静态成员在类加载完成后已经存在于heap中了，但是如果没创建对象的话非静态成员是不存在的，所以在代码中有引用时会发生编译错误。反过来说，非静态成员可以访问静态成员，因为当非静态成员存在于heap中时，静态成员肯定已经存在于heap中了。</p></li><li><p><strong>static 声明的变量和方法在类中共享的</strong>，当使用static修饰变量时，<strong>在类中是共享</strong>。例如：在下列代码中定义静态变量i = 10时，当类创建了多个对象时，其中一个对象修改了i的值（ts1.i = 100）,其他对象ts2、ts3调用i值时，会出现i值都是100，说明静态变量i是共享。 <strong>非静态变量</strong>：当类中创建多个对象时，非静态变量在内存中直接分布各个新创建的对象中。所以当修改某个对象引用的变量值时，其他对象在引用变量时，没有发生改变。例如：j =20 ；ts1.j = 15;此时ts1对象输出 j=15 .而输出的ts2.j=20,ts3.j=20跟初始定义的j一样;</p></li><li><p>静态成员方法采用通过类名的方法调用“Thread.sleep()”和采用实例对象的调用sleep成员方法在效果上是一样的。<br>假设A和B分别是两个不同的线程，而线程B执行到下面的语句</p><blockquote><p>A.sleep(1000);</p></blockquote><p>则进入睡眠状态的是线程B，而不是线程A。</p></li><li><p>段落一</p><p>小段一</p></li><li><p>段落二</p><p>小段二</p></li></ul><hr><h1 id="多线程程序设计"><a href="#多线程程序设计" class="headerlink" title="多线程程序设计"></a>多线程程序设计</h1><p><strong>线程的生命周期</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://pxyr7adce.bkt.clouddn.com/img/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="线程的生命周期" title="线程的生命周期"></p><h2 id="多线程同步"><a href="#多线程同步" class="headerlink" title="多线程同步"></a>多线程同步</h2><p>java虚拟机通过给每个<strong>对象</strong>加锁的方式实现多线程的同步处理。这里的<strong>对象</strong>包括<strong>类对象</strong>和<strong>实例对象</strong>两种。<br>一个类的<strong>静态成员域</strong>和<strong>静态成员方法</strong>隶属于类对象。一个类的<strong>非静态成员域</strong>和<strong>非静态成员方法</strong>是不隶属于类对象的，而隶属于类的<strong>实例对象</strong>。同样，一个类的静态成员域和静态成员方法不隶属于类的实例对象。创建类的实例对象可以通过<code>new</code>运算符和类的构造方法。</p><hr><h2 id="Java中的一个类怎么调用另一个类中的方法？"><a href="#Java中的一个类怎么调用另一个类中的方法？" class="headerlink" title="Java中的一个类怎么调用另一个类中的方法？"></a>Java中的一个类怎么调用另一个类中的方法？</h2><ul><li>方法1：新建一个类。然后在调用类中先进行被调用类实例化，然后通过实例化的对象访问。例如：</li></ul><pre><code>//先定义一个类import static java.lang.Systenm.out;public class Son{    public void IsSon(){        out.append(&quot;调用Son类中的IsSon成员方法成功&quot;)；    }}</code></pre><pre><code>//实例化，调用public calss Main(){    public static void main(String args[]){        Son son = new Son();        son.IsSon();    }}</code></pre><ul><li>方法2:新建一个类，将该类中需要被调用的方法设置为静态（static），加了static后，就可以用类名直接调用。然后在调用类中直接通过类名进行访问。调用格式为：类名.方法名（参数表）。</li></ul><pre><code>//先定义一个类import static java.lang.Systenm.out;public class Son{    public static void IsSon(){        out.append(&quot;调用Son类中的IsSon成员方法成功&quot;)；    }}</code></pre><pre><code>//实例化，调用public calss Main(){    public static void main(String args[]){        son.IsSon();    }}</code></pre><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>对象的构造主要通过类。类是实例对象的模板。</p><blockquote><p>[修饰词] class 类名 [extends 父类] [implemes 接口] {<br><br>类体<br><br>}</p></blockquote><p>&nbsp;&nbsp;<br>类体部分可以对定义类的<strong>构造方法</strong>和<strong>类的两类成员要素</strong>(成员域和成员方法)。</p><p>&nbsp;&nbsp;<br><strong>类的构造方法</strong>主要用创建类的实例对象，通常同时完成新创建的实例对象的初始化。</p><p>&nbsp;&nbsp;<br>构造方法有如下3个特点</p><blockquote><ol><li>构造方法名必须与类名相同<br> </li><li>构造方法不具有任何返回类型<br></li><li>任何一个类都含有构造方法</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>esp8266安装</title>
      <link href="/2019/08/29/esp8266-an-zhuang/"/>
      <url>/2019/08/29/esp8266-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><blockquote><p>Hello World!</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络资源</title>
      <link href="/2019/08/29/zi-yuan/"/>
      <url>/2019/08/29/zi-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h1><blockquote><p>此页面主要分享一些搜集到的网络资源，不定时更新，侵权联系。</p></blockquote><hr><p><a href="https://pan.baidu.com/s/1OkV-Z1C1wYqKqmdFlpI9vA" target="_blank" rel="noopener">Java程序员面试宝典第4版</a> 提取码：hsl3 </p><p><a href="https://pan.baidu.com/s/1K1MvYuBprwSE72nixANkMw" target="_blank" rel="noopener">Java程序员面试笔试宝典</a> 提取码: 32k9 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客</title>
      <link href="/2019/08/29/wo-de-bo-ke/"/>
      <url>/2019/08/29/wo-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h1><hr><p>这是我的第一个个人博客网站，不定时更新，具体搭建过程可以<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">参考这里</a>。</p><p>感谢博主网站源代码开源，引用链接：<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">https://sunhwee.com/posts/6e8839eb.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
